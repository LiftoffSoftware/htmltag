{"body": "<h1>Source code for htmltag</h1><div class=\"highlight\"><pre>\n<span class=\"c\"># -*- coding: utf-8 -*-</span>\n<span class=\"c\">#</span>\n<span class=\"c\">#       Copyright 2013 Liftoff Software Corporation</span>\n<span class=\"c\">#</span>\n<span class=\"c\"># For license information see LICENSE.txt</span>\n\n<span class=\"c\"># Meta</span>\n<span class=\"n\">__version__</span> <span class=\"o\">=</span> <span class=\"s\">&#39;1.5&#39;</span>\n<span class=\"n\">__version_info__</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">__license__</span> <span class=\"o\">=</span> <span class=\"s\">&quot;Apache 2.0&quot;</span>\n<span class=\"n\">__author__</span> <span class=\"o\">=</span> <span class=\"s\">&#39;Dan McDougall &lt;daniel.mcdougall@liftoffsoftware.com&gt;&#39;</span>\n\n<span class=\"n\">__doc__</span> <span class=\"o\">=</span> <span class=\"s\">&quot;&quot;&quot;</span><span class=\"se\">\\</span>\n<span class=\"s\">The htmltag module</span>\n<span class=\"s\">==================</span>\n<span class=\"s\">.. note::</span>\n\n<span class=\"s\">    The latest, complete documentation of htmltag can be found here:</span>\n<span class=\"s\">    http://liftoff.github.io/htmltag/</span>\n\n<span class=\"s\">    The latest version of this module can be obtained from Github:</span>\n<span class=\"s\">    http://liftoff.github.io/htmltag/</span>\n\n<span class=\"s\">htmltag.py - A Python (2 *and* 3) module for wrapping whatever strings you want</span>\n<span class=\"s\">in HTML tags. Example::</span>\n\n<span class=\"s\">    &gt;&gt;&gt; from htmltag import strong</span>\n<span class=\"s\">    &gt;&gt;&gt; print(strong(&quot;SO STRONG!&quot;))</span>\n<span class=\"s\">    &lt;strong&gt;SO STRONG!&lt;/strong&gt;</span>\n\n<span class=\"s\">What tags are supported?  All of them!  An important facet of modern web</span>\n<span class=\"s\">programming is the ability to use your own custom tags.  For example::</span>\n\n<span class=\"s\">    &gt;&gt;&gt; from htmltag import foobar</span>\n<span class=\"s\">    &gt;&gt;&gt; foobar(&#39;Custom tag example&#39;)</span>\n<span class=\"s\">    &#39;&lt;foobar&gt;Custom tag example&lt;/foobar&gt;&#39;</span>\n\n<span class=\"s\">To add attributes inside your tag just pass them as keyword arguments::</span>\n\n<span class=\"s\">    &gt;&gt;&gt; from htmltag import a</span>\n<span class=\"s\">    &gt;&gt;&gt; print(a(&#39;awesome software&#39;, href=&#39;http://liftoffsoftware.com/&#39;))</span>\n<span class=\"s\">    &lt;a href=&quot;http://liftoffsoftware.com/&quot;&gt;awesome software&lt;/a&gt;</span>\n\n<span class=\"s\">To work around the problem of reserved words as keyword arguments (i.e. can&#39;t</span>\n<span class=\"s\">have &#39;class=&quot;foo&quot;&#39;) just prefix the keyword with an underscore like so::</span>\n\n<span class=\"s\">    &gt;&gt;&gt; from htmltag import div</span>\n<span class=\"s\">    &gt;&gt;&gt; print(div(&quot;example&quot;, _class=&quot;someclass&quot;))</span>\n<span class=\"s\">    &lt;div class=&quot;someclass&quot;&gt;example&lt;/div&gt;</span>\n\n<span class=\"s\">Another option--which is useful for things like &#39;data-\\*&#39; attributes--is to pass</span>\n<span class=\"s\">keyword arguments as a dict using the `\\*\\* operator</span>\n<span class=\"s\">&lt;http://docs.python.org/2/tutorial/controlflow.html#unpacking-argument-lists&gt;`_</span>\n<span class=\"s\">like so::</span>\n\n<span class=\"s\">    &gt;&gt;&gt; from htmltag import li</span>\n<span class=\"s\">    &gt;&gt;&gt; print(li(&quot;CEO&quot;, **{&quot;class&quot;: &quot;user&quot;, &quot;data-name&quot;: &quot;Dan McDougall&quot;}))</span>\n<span class=\"s\">    &lt;li class=&quot;user&quot; data-name=&quot;Dan McDougall&quot;&gt;CEO&lt;/li&gt;</span>\n\n<span class=\"s\">If you want to use upper-case tags just import them in caps:</span>\n\n<span class=\"s\">    &gt;&gt;&gt; from htmltag import STRONG</span>\n<span class=\"s\">    &gt;&gt;&gt; print(STRONG(&#39;whatever&#39;))</span>\n<span class=\"s\">    &lt;STRONG&gt;whatever&lt;/STRONG&gt;</span>\n\n<span class=\"s\">Combining Tags and Content</span>\n<span class=\"s\">--------------------------</span>\n<span class=\"s\">You can combine multiple tags to create a larger HTML string like so::</span>\n\n<span class=\"s\">    &gt;&gt;&gt; from htmltag import table, tr, td</span>\n<span class=\"s\">    &gt;&gt;&gt; print(table(</span>\n<span class=\"s\">    ...     tr(td(&#39;100&#39;), td(&#39;200&#39;), id=&quot;row1&quot;),</span>\n<span class=\"s\">    ...     tr(td(&#39;150&#39;), td(&#39;250&#39;), id=&quot;row2&quot;),</span>\n<span class=\"s\">    ... ))</span>\n<span class=\"s\">    &lt;table&gt;&lt;tr id=&quot;row1&quot;&gt;&lt;td&gt;100&lt;/td&gt;&lt;td&gt;200&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&quot;row2&quot;&gt;&lt;td&gt;150&lt;/td&gt;&lt;td&gt;250&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span>\n\n<span class=\"s\">**NOTE:** If you&#39;re going to do something like the above please use a *real*</span>\n<span class=\"s\">template language/module instead of `htmltag`.  You&#39;re *probably* &quot;doing it</span>\n<span class=\"s\">wrong&quot; if you end up with something like the above in your code.  For example,</span>\n<span class=\"s\">try `Tornado&#39;s template engine</span>\n<span class=\"s\">&lt;http://www.tornadoweb.org/en/stable/template.html&gt;`_.</span>\n\n<span class=\"s\">Special Characters</span>\n<span class=\"s\">------------------</span>\n<span class=\"s\">Special characters that cause trouble like, &#39;&lt;&#39;, &#39;&gt;&#39;, and &#39;&amp;&#39; will be</span>\n<span class=\"s\">automatically converted into HTML entities.  If you don&#39;t want that to happen</span>\n<span class=\"s\">just wrap your string in :class:`htmltag.HTML` like so::</span>\n\n<span class=\"s\">    &gt;&gt;&gt; from htmltag import HTML, a</span>\n<span class=\"s\">    &gt;&gt;&gt; txt = HTML(&quot;&lt;strong&gt;I am already HTML. Don&#39;t escape me!&lt;/strong&gt;&quot;)</span>\n<span class=\"s\">    &gt;&gt;&gt; a(txt, href=&quot;http://liftoffsoftware.com/&quot;)</span>\n<span class=\"s\">    &#39;&lt;a href=&quot;http://liftoffsoftware.com/&quot;&gt;&lt;strong&gt;I am already HTML. Don</span><span class=\"se\">\\\\</span><span class=\"s\">&#39;t escape me!&lt;/strong&gt;&lt;/a&gt;&#39;</span>\n\n<span class=\"s\">Since Python doesn&#39;t allow modules to have dashes (-) in their names, if you</span>\n<span class=\"s\">need to create a tag like that just use an underscore and change its &#39;tagname&#39;</span>\n<span class=\"s\">attribute::</span>\n\n<span class=\"s\">    &gt;&gt;&gt; from htmltag import foo_bar</span>\n<span class=\"s\">    &gt;&gt;&gt; print(foo_bar(&#39;baz&#39;)) # Before</span>\n<span class=\"s\">    &#39;&lt;foo_bar&gt;baz&lt;/foo_bar&gt;&#39;</span>\n<span class=\"s\">    &gt;&gt;&gt; foo_bar.tagname = &#39;foo-bar&#39;</span>\n<span class=\"s\">    &gt;&gt;&gt; print(foo_bar(&#39;baz&#39;)) # Before</span>\n<span class=\"s\">    &#39;&lt;foo-bar&gt;baz&lt;/foo-bar&gt;&#39;</span>\n\n<span class=\"s\">By default self-closing HTML tags like &#39;&lt;img&gt;&#39; will not include an ending slash.</span>\n<span class=\"s\">To change this behavior (i.e. for XHTML) just set &#39;ending_slash&#39; to `True`::</span>\n\n<span class=\"s\">    &gt;&gt;&gt; from htmltag import img</span>\n<span class=\"s\">    &gt;&gt;&gt; img.ending_slash = True</span>\n<span class=\"s\">    &gt;&gt;&gt; img(src=&quot;http://somehost/images/image.png&quot;)</span>\n<span class=\"s\">    &#39;&lt;img src=&quot;http://somehost/images/image.png&quot; /&gt;&#39;</span>\n<span class=\"s\">    &gt;&gt;&gt; img.ending_slash = False # Reset for later doctests</span>\n\n<span class=\"s\">Protections Against Cross-Site Scripting (XSS)</span>\n<span class=\"s\">----------------------------------------------</span>\n<span class=\"s\">By default all unsafe (XSS) content in HTML tags will be removed::</span>\n\n<span class=\"s\">    &gt;&gt;&gt; from htmltag import a, img</span>\n<span class=\"s\">    &gt;&gt;&gt; a(img(src=&quot;javascript:alert(&#39;pwned!&#39;)&quot;), href=&quot;http://hacker/&quot;)</span>\n<span class=\"s\">    &#39;&lt;a href=&quot;http://hacker/&quot;&gt;(removed)&lt;/a&gt;&#39;</span>\n\n<span class=\"s\">If you want to change this behavior set the tag&#39;s &#39;safe_mode&#39; attribute like</span>\n<span class=\"s\">so::</span>\n\n<span class=\"s\">    &gt;&gt;&gt; from htmltag import a, img</span>\n<span class=\"s\">    &gt;&gt;&gt; a.safe_mode = False</span>\n<span class=\"s\">    &gt;&gt;&gt; img.safe_mode = False</span>\n<span class=\"s\">    &gt;&gt;&gt; a(img(src=&quot;javascript:alert(&#39;pwned!&#39;)&quot;), href=&quot;http://hacker/&quot;)</span>\n<span class=\"s\">    &#39;&lt;a href=&quot;http://hacker/&quot;&gt;&lt;img src=&quot;javascript:alert(</span><span class=\"se\">\\\\</span><span class=\"s\">&#39;pwned!</span><span class=\"se\">\\\\</span><span class=\"s\">&#39;)&quot;&gt;&lt;/a&gt;&#39;</span>\n<span class=\"s\">    &gt;&gt;&gt; a.safe_mode = True # Reset for later doctests</span>\n<span class=\"s\">    &gt;&gt;&gt; img.safe_mode = True # Ditto</span>\n\n<span class=\"s\">You may also change the replacement text if you like::</span>\n\n<span class=\"s\">    &gt;&gt;&gt; from htmltag import a, img</span>\n<span class=\"s\">    &gt;&gt;&gt; img.replacement = &quot;No no no!&quot;</span>\n<span class=\"s\">    &gt;&gt;&gt; a(img(src=&quot;javascript:alert(&#39;pwned!&#39;)&quot;), href=&quot;http://hacker/&quot;)</span>\n<span class=\"s\">    &#39;&lt;a href=&quot;http://hacker/&quot;&gt;No no no!&lt;/a&gt;&#39;</span>\n\n<span class=\"s\">If you set &#39;replacement&#39; to &#39;entities&#39; the rejected HTML will be converted to</span>\n<span class=\"s\">character entities like so::</span>\n\n<span class=\"s\">    &gt;&gt;&gt; from htmltag import a, img</span>\n<span class=\"s\">    &gt;&gt;&gt; a.replacement = &quot;entities&quot;</span>\n<span class=\"s\">    &gt;&gt;&gt; img.replacement = &quot;entities&quot;</span>\n<span class=\"s\">    &gt;&gt;&gt; a(img(src=&quot;javascript:alert(&#39;pwned!&#39;)&quot;), href=&quot;http://hacker/&quot;)</span>\n<span class=\"s\">    &#39;&lt;a href=&quot;http://hacker/&quot;&gt;&amp;lt;img src=&quot;javascript:alert(</span><span class=\"se\">\\\\</span><span class=\"s\">&#39;pwned!</span><span class=\"se\">\\\\</span><span class=\"s\">&#39;)&quot;&amp;gt;&lt;/a&gt;&#39;</span>\n\n<span class=\"s\">It is also possible to create a whitelist of allowed tags.  All other tags</span>\n<span class=\"s\">contained therein will automatically be replaced::</span>\n\n<span class=\"s\">    &gt;&gt;&gt; from htmltag import span</span>\n<span class=\"s\">    &gt;&gt;&gt; whitelist = [&#39;span&#39;, &#39;b&#39;, &#39;i&#39;, &#39;strong&#39;]</span>\n<span class=\"s\">    &gt;&gt;&gt; span.whitelist = whitelist</span>\n<span class=\"s\">    &gt;&gt;&gt; span(HTML(&#39;This is &lt;b&gt;bold&lt;/b&gt; new lib is &lt;script&gt;awesome();&lt;/script&gt;&#39;))</span>\n<span class=\"s\">    &#39;&lt;span&gt;This is &lt;b&gt;bold&lt;/b&gt; new lib is (removed)awesome();(removed)&lt;/span&gt;&#39;</span>\n\n<span class=\"s\">Lastly, all strings returned by `htmltag` are actually a subclass of `str`:</span>\n<span class=\"s\">`~htmltag.HTML`.  It has a useful `escaped` property:</span>\n\n<span class=\"s\">    &gt;&gt;&gt; from htmltag import address</span>\n<span class=\"s\">    &gt;&gt;&gt; address.safe_mode = False # Turn off so we have a dangerous example ;)</span>\n<span class=\"s\">    &gt;&gt;&gt; html = address(&#39;1 Hacker Ln., Nowhere, USA&#39;)</span>\n<span class=\"s\">    &gt;&gt;&gt; print(html)</span>\n<span class=\"s\">    &lt;address&gt;1 Hacker Ln., Nowhere, USA&lt;/address&gt;</span>\n<span class=\"s\">    &gt;&gt;&gt; print(html.escaped)</span>\n<span class=\"s\">    &amp;lt;address&amp;gt;1 Hacker Ln., Nowhere, USA&amp;lt;/address&amp;gt;</span>\n\n<span class=\"s\">This can be extremely useful if you want to be double-sure that no executable</span>\n<span class=\"s\">stuff ends up in your program&#39;s output.</span>\n\n\n<span class=\"s\">Functions and Classes</span>\n<span class=\"s\">=====================</span>\n<span class=\"s\">&quot;&quot;&quot;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span><span class=\"o\">,</span> <span class=\"nn\">re</span><span class=\"o\">,</span> <span class=\"nn\">cgi</span><span class=\"o\">,</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">types</span> <span class=\"kn\">import</span> <span class=\"n\">ModuleType</span>\n\n<span class=\"n\">self_closing_tags</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">([</span>\n    <span class=\"s\">&#39;area&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;base&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;br&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;col&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;command&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;embed&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;hr&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;img&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;input&#39;</span><span class=\"p\">,</span>\n    <span class=\"s\">&#39;keygen&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;link&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;meta&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;param&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;source&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;track&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;wbr&#39;</span><span class=\"p\">,</span>\n<span class=\"p\">])</span>\n<span class=\"n\">FILE</span> <span class=\"o\">=</span> <span class=\"n\">__file__</span>\n\n<div class=\"viewcode-block\" id=\"strip_xss\"><a class=\"viewcode-back\" href=\"../../#htmltag.strip_xss\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">strip_xss</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">,</span> <span class=\"n\">whitelist</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">replacement</span><span class=\"o\">=</span><span class=\"s\">&quot;(removed)&quot;</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    This function returns a tuple containing:</span>\n\n<span class=\"sd\">        * *html* with all non-whitelisted HTML tags replaced with *replacement*.</span>\n<span class=\"sd\">        * A `set()` containing the tags that were removed.</span>\n\n<span class=\"sd\">    Any tags that contain JavaScript, VBScript, or other known XSS/executable</span>\n<span class=\"sd\">    functions will also be removed.</span>\n\n<span class=\"sd\">    If *whitelist* is not given the following will be used::</span>\n\n<span class=\"sd\">        whitelist = set([</span>\n<span class=\"sd\">            &#39;a&#39;, &#39;abbr&#39;, &#39;aside&#39;, &#39;audio&#39;, &#39;bdi&#39;, &#39;bdo&#39;, &#39;blockquote&#39;, &#39;canvas&#39;,</span>\n<span class=\"sd\">            &#39;caption&#39;, &#39;code&#39;, &#39;col&#39;, &#39;colgroup&#39;, &#39;data&#39;, &#39;dd&#39;, &#39;del&#39;,</span>\n<span class=\"sd\">            &#39;details&#39;, &#39;div&#39;, &#39;dl&#39;, &#39;dt&#39;, &#39;em&#39;, &#39;figcaption&#39;, &#39;figure&#39;, &#39;h1&#39;,</span>\n<span class=\"sd\">            &#39;h2&#39;, &#39;h3&#39;, &#39;h4&#39;, &#39;h5&#39;, &#39;h6&#39;, &#39;hr&#39;, &#39;i&#39;, &#39;img&#39;, &#39;ins&#39;, &#39;kbd&#39;, &#39;li&#39;,</span>\n<span class=\"sd\">            &#39;mark&#39;, &#39;ol&#39;, &#39;p&#39;, &#39;pre&#39;, &#39;q&#39;, &#39;rp&#39;, &#39;rt&#39;, &#39;ruby&#39;, &#39;s&#39;, &#39;samp&#39;,</span>\n<span class=\"sd\">            &#39;small&#39;, &#39;source&#39;, &#39;span&#39;, &#39;strong&#39;, &#39;sub&#39;, &#39;summary&#39;, &#39;sup&#39;,</span>\n<span class=\"sd\">            &#39;table&#39;, &#39;td&#39;, &#39;th&#39;, &#39;time&#39;, &#39;tr&#39;, &#39;track&#39;, &#39;u&#39;, &#39;ul&#39;, &#39;var&#39;,</span>\n<span class=\"sd\">            &#39;video&#39;, &#39;wbr&#39;</span>\n<span class=\"sd\">        ])</span>\n\n<span class=\"sd\">    .. note:: To disable the whitelisting simply set `whitelist=&quot;off&quot;`.</span>\n\n<span class=\"sd\">    Example::</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; html = &#39;&lt;span&gt;Hello, exploit: &lt;img src=&quot;javascript:alert(\\&quot;pwned!\\&quot;)&quot;&gt;&lt;/span&gt;&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; html, rejects = strip_xss(html)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&quot;&#39;%s&#39;, Rejected: &#39;%s&#39;&quot; % (html, &quot; &quot;.join(rejects)))</span>\n<span class=\"sd\">        &#39;&lt;span&gt;Hello, exploit: (removed)&lt;/span&gt;&#39;, Rejected: &#39;&lt;img src=&quot;javascript:alert(&quot;pwned!&quot;)&quot;&gt;&#39;</span>\n\n<span class=\"sd\">    .. note:: The default *replacement* is &quot;(removed)&quot;.</span>\n\n<span class=\"sd\">    If *replacement* is &quot;entities&quot; bad HTML tags will be encoded into HTML</span>\n<span class=\"sd\">    entities.  This allows things like &lt;script&gt;&#39;whatever&#39;&lt;/script&gt; to be</span>\n<span class=\"sd\">    displayed without execution (which would be much less annoying to users that</span>\n<span class=\"sd\">    were merely trying to share a code example).  Here&#39;s an example::</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; html = &#39;&lt;span&gt;Hello, exploit: &lt;img src=&quot;javascript:alert(\\&quot;pwned!\\&quot;)&quot;&gt;&lt;/span&gt;&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; html, rejects = strip_xss(html, replacement=&quot;entities&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(html)</span>\n<span class=\"sd\">        &lt;span&gt;Hello, exploit: &amp;lt;img src=&quot;javascript:alert(&quot;pwned!&quot;)&quot;&amp;gt;&lt;/span&gt;</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&quot;Rejected: &#39;%s&#39;&quot; % &quot;, &quot;.join(rejects))</span>\n<span class=\"sd\">        Rejected: &#39;&lt;img src=&quot;javascript:alert(&quot;pwned!&quot;)&quot;&gt;&#39;</span>\n\n<span class=\"sd\">    **NOTE:** This function should work to protect against *all* `the XSS</span>\n<span class=\"sd\">    examples at OWASP</span>\n<span class=\"sd\">    &lt;https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet&gt;`_.  Please</span>\n<span class=\"sd\">    `let us know &lt;https://github.com/LiftoffSoftware/htmltag/issues&gt;`_ if you</span>\n<span class=\"sd\">    find something we missed.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">re_html_tag</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span> <span class=\"c\"># This matches HTML tags (if used correctly)</span>\n      <span class=\"s\">&quot;(?i)&lt;\\/?\\w+((\\s+\\w+(\\s*=\\s*(?:</span><span class=\"se\">\\&quot;</span><span class=\"s\">.*?</span><span class=\"se\">\\&quot;</span><span class=\"s\">|&#39;.*?&#39;|[^&#39;</span><span class=\"se\">\\&quot;</span><span class=\"s\">&gt;\\s]+))?)+\\s*|\\s*)\\/?&gt;&quot;</span><span class=\"p\">)</span>\n    <span class=\"c\"># This will match things like &#39;onmouseover=&#39; (&#39;on&lt;whatever&gt;=&#39;)</span>\n    <span class=\"n\">on_events_re</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"s\">&#39;.*\\s+(on[a-z]+\\s*=).*&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">whitelist</span><span class=\"p\">:</span>\n        <span class=\"c\"># These are all pretty safe and covers most of what users would want in</span>\n        <span class=\"c\"># terms of formatting and sharing media (images, audio, video, etc).</span>\n        <span class=\"n\">whitelist</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">([</span>\n            <span class=\"s\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;abbr&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;aside&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;audio&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;bdi&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;bdo&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;blockquote&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;canvas&#39;</span><span class=\"p\">,</span>\n            <span class=\"s\">&#39;caption&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;code&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;col&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;colgroup&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;data&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;dd&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;del&#39;</span><span class=\"p\">,</span>\n            <span class=\"s\">&#39;details&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;div&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;dl&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;dt&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;em&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;figcaption&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;figure&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;h1&#39;</span><span class=\"p\">,</span>\n            <span class=\"s\">&#39;h2&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;h3&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;h4&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;h5&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;h6&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;hr&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;i&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;img&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;ins&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;kbd&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;li&#39;</span><span class=\"p\">,</span>\n            <span class=\"s\">&#39;mark&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;ol&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;p&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;pre&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;q&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;rp&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;rt&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;ruby&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;s&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;samp&#39;</span><span class=\"p\">,</span>\n            <span class=\"s\">&#39;small&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;source&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;span&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;strong&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;sub&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;summary&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;sup&#39;</span><span class=\"p\">,</span>\n            <span class=\"s\">&#39;table&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;td&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;th&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;time&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;tr&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;track&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;u&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;ul&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;var&#39;</span><span class=\"p\">,</span>\n            <span class=\"s\">&#39;video&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;wbr&#39;</span>\n        <span class=\"p\">])</span>\n    <span class=\"k\">elif</span> <span class=\"n\">whitelist</span> <span class=\"o\">==</span> <span class=\"s\">&quot;off&quot;</span><span class=\"p\">:</span>\n        <span class=\"n\">whitelist</span> <span class=\"o\">=</span> <span class=\"bp\">None</span> <span class=\"c\"># Disable it altogether</span>\n    <span class=\"n\">bad_tags</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">tag</span> <span class=\"ow\">in</span> <span class=\"n\">re_html_tag</span><span class=\"o\">.</span><span class=\"n\">finditer</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">):</span>\n        <span class=\"n\">tag</span> <span class=\"o\">=</span> <span class=\"n\">tag</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">()</span>\n        <span class=\"n\">tag_lower</span> <span class=\"o\">=</span> <span class=\"n\">tag</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n        <span class=\"n\">short_tag</span> <span class=\"o\">=</span> <span class=\"n\">tag_lower</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">lstrip</span><span class=\"p\">(</span><span class=\"s\">&#39;&lt;/&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rstrip</span><span class=\"p\">(</span><span class=\"s\">&#39;&gt;&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">whitelist</span> <span class=\"ow\">and</span> <span class=\"n\">short_tag</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">whitelist</span><span class=\"p\">:</span>\n            <span class=\"n\">bad_tags</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"p\">)</span>\n            <span class=\"k\">continue</span>\n        <span class=\"c\"># Make sure the tag can&#39;t execute any JavaScript</span>\n        <span class=\"k\">if</span> <span class=\"s\">&quot;javascript:&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">tag_lower</span><span class=\"p\">:</span>\n            <span class=\"n\">bad_tags</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"p\">)</span>\n            <span class=\"k\">continue</span>\n        <span class=\"c\"># on&lt;whatever&gt; events are not allowed (just another XSS vuln)</span>\n        <span class=\"k\">if</span> <span class=\"n\">on_events_re</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">tag_lower</span><span class=\"p\">):</span>\n            <span class=\"n\">bad_tags</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"p\">)</span>\n            <span class=\"k\">continue</span>\n        <span class=\"c\"># Flash sucks</span>\n        <span class=\"k\">if</span> <span class=\"s\">&quot;fscommand&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">tag_lower</span><span class=\"p\">:</span>\n            <span class=\"n\">bad_tags</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"p\">)</span>\n            <span class=\"k\">continue</span>\n        <span class=\"c\"># I&#39;d be impressed if an attacker tried this one (super obscure)</span>\n        <span class=\"k\">if</span> <span class=\"s\">&quot;seeksegmenttime&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">tag_lower</span><span class=\"p\">:</span>\n            <span class=\"n\">bad_tags</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"p\">)</span>\n            <span class=\"k\">continue</span>\n        <span class=\"c\"># Yes we&#39;ll protect IE users from themselves...</span>\n        <span class=\"k\">if</span> <span class=\"s\">&quot;vbscript:&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">tag_lower</span><span class=\"p\">:</span>\n            <span class=\"n\">bad_tags</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"p\">)</span>\n            <span class=\"k\">continue</span>\n    <span class=\"k\">if</span> <span class=\"n\">replacement</span> <span class=\"o\">==</span> <span class=\"s\">&quot;entities&quot;</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">bad_tag</span> <span class=\"ow\">in</span> <span class=\"n\">bad_tags</span><span class=\"p\">:</span>\n            <span class=\"n\">escaped</span> <span class=\"o\">=</span> <span class=\"n\">cgi</span><span class=\"o\">.</span><span class=\"n\">escape</span><span class=\"p\">(</span><span class=\"n\">bad_tag</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s\">&#39;ascii&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;xmlcharrefreplace&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">bad_tag</span><span class=\"p\">,</span> <span class=\"n\">escaped</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s\">&#39;ascii&#39;</span><span class=\"p\">))</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">bad_tag</span> <span class=\"ow\">in</span> <span class=\"n\">bad_tags</span><span class=\"p\">:</span>\n            <span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">bad_tag</span><span class=\"p\">,</span> <span class=\"n\">replacement</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">,</span> <span class=\"n\">bad_tags</span><span class=\"p\">)</span>\n</div>\n<div class=\"viewcode-block\" id=\"HTML\"><a class=\"viewcode-back\" href=\"../../#htmltag.HTML\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">HTML</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    .. versionadded:: 1.2.0</span>\n\n<span class=\"sd\">    A subclass of Python&#39;s built-in `str` to add a simple `__html__` method</span>\n<span class=\"sd\">    that lets us know this string is HTML and does not need to be escaped.  It</span>\n<span class=\"sd\">    also has an `escaped` property that will return `self` with all special</span>\n<span class=\"sd\">    characters converted into HTML entities.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">tagname</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n<div class=\"viewcode-block\" id=\"HTML.__html__\"><a class=\"viewcode-back\" href=\"../../#htmltag.HTML.__html__\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">__html__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns `self` (we&#39;re already a string) in unmodified form.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n</div>\n    <span class=\"nd\">@property</span>\n<div class=\"viewcode-block\" id=\"HTML.escaped\"><a class=\"viewcode-back\" href=\"../../#htmltag.HTML.escaped\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">escaped</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        A property that returns `self` with all characters that have special</span>\n<span class=\"sd\">        meaning (in HTML/XML) replaced with HTML entities.  Example::</span>\n\n<span class=\"sd\">            &gt;&gt;&gt; print(HTML(&#39;&lt;span&gt;These span tags will be escaped&lt;/span&gt;&#39;).escaped)</span>\n<span class=\"sd\">            &amp;lt;span&amp;gt;These span tags will be escaped&amp;lt;/span&amp;gt;</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">cgi</span><span class=\"o\">.</span><span class=\"n\">escape</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span>\n            <span class=\"s\">&#39;ascii&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;xmlcharrefreplace&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s\">&#39;ascii&#39;</span><span class=\"p\">)</span>\n</div>\n<div class=\"viewcode-block\" id=\"HTML.append\"><a class=\"viewcode-back\" href=\"../../#htmltag.HTML.append\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">strings</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Adds any number of supplied *strings* to `self` (we&#39;re a subclass of</span>\n<span class=\"sd\">        `str` remember) just before the last closing tag and returns a new</span>\n<span class=\"sd\">        instance of `~htmltag.HTML` with the result.</span>\n<span class=\"sd\">        Example::</span>\n\n<span class=\"sd\">            &gt;&gt;&gt; from htmltag import span, b</span>\n<span class=\"sd\">            &gt;&gt;&gt; html = span(&#39;Test:&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(html)</span>\n<span class=\"sd\">            &lt;span&gt;Test:&lt;/span&gt;</span>\n<span class=\"sd\">            &gt;&gt;&gt; html = html.append(&#39; &#39;, b(&#39;appended&#39;))</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(html)</span>\n<span class=\"sd\">            &lt;span&gt;Test: &lt;b&gt;appended&lt;/b&gt;&lt;/span&gt;</span>\n\n<span class=\"sd\">        In the case of self-closing tags like &#39;&lt;img&gt;&#39; the string will simply be</span>\n<span class=\"sd\">        appended after the tag::</span>\n\n<span class=\"sd\">            &gt;&gt;&gt; from htmltag import img</span>\n<span class=\"sd\">            &gt;&gt;&gt; image = img(src=&quot;http://company.com/image.png&quot;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(image.append(&quot;Appended string&quot;))</span>\n<span class=\"sd\">            &lt;img src=&quot;http://company.com/image.png&quot;&gt;Appended string</span>\n\n<span class=\"sd\">        .. note:: Why not update ourselves in-place?  Because we&#39;re a subclass</span>\n<span class=\"sd\">            of `str`; in Python strings are immutable.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">close_tag_start</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rfind</span><span class=\"p\">(</span><span class=\"s\">&#39;&lt;/&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tagname</span><span class=\"p\">:</span> <span class=\"c\"># More accurate</span>\n            <span class=\"n\">close_tag_start</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rfind</span><span class=\"p\">(</span><span class=\"s\">&#39;&lt;/&#39;</span><span class=\"o\">+</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tagname</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">close_tag_start</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"c\"># Couldn&#39;t find closing tag</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span> <span class=\"o\">+</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">strings</span><span class=\"p\">)</span> <span class=\"c\"># Just tack on to the end</span>\n        <span class=\"n\">ending</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"n\">close_tag_start</span><span class=\"p\">:]</span>\n        <span class=\"n\">beginning</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"p\">[:</span><span class=\"n\">close_tag_start</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tagname</span><span class=\"p\">:</span> <span class=\"c\"># Preserve it</span>\n            <span class=\"n\">tagname</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tagname</span>\n            <span class=\"n\">new</span> <span class=\"o\">=</span> <span class=\"n\">HTML</span><span class=\"p\">(</span><span class=\"n\">beginning</span> <span class=\"o\">+</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">strings</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">ending</span><span class=\"p\">)</span>\n            <span class=\"n\">new</span><span class=\"o\">.</span><span class=\"n\">tagname</span> <span class=\"o\">=</span> <span class=\"n\">tagname</span>\n            <span class=\"k\">return</span> <span class=\"n\">new</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">HTML</span><span class=\"p\">(</span><span class=\"n\">beginning</span> <span class=\"o\">+</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">strings</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">ending</span><span class=\"p\">)</span>\n</div></div>\n<div class=\"viewcode-block\" id=\"TagWrap\"><a class=\"viewcode-back\" href=\"../../#htmltag.TagWrap\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">TagWrap</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Lets you wrap whatever string you want in whatever HTML tag (*tagname*) you</span>\n<span class=\"sd\">    want.</span>\n\n<span class=\"sd\">    **Optional Keyword Arguments:**</span>\n\n<span class=\"sd\">    :keyword safe_mode: If `True` dangerous (XSS) content will be removed</span>\n<span class=\"sd\">        from all HTML.  Defaults to `True`</span>\n<span class=\"sd\">    :keyword whitelist: If given only tags that exist in the whitelist will be</span>\n<span class=\"sd\">        allowed.  All else will be escaped into HTML entities.</span>\n<span class=\"sd\">    :keyword replacement: A string to replace unsafe HTML with.  If set to</span>\n<span class=\"sd\">        &quot;entities&quot;, will convert unsafe tags to HTML entities so they</span>\n<span class=\"sd\">        display as-is but won&#39;t be evaluated by renderers/browsers&#39;.  The</span>\n<span class=\"sd\">        defaults is &quot;(removed)&quot;.</span>\n<span class=\"sd\">    :keyword log_rejects: If `True` rejected unsafe (XSS) HTML will be</span>\n<span class=\"sd\">        logged using :meth:`logging.error`.  Defaults to `False`</span>\n<span class=\"sd\">    :keyword ending_slash: If `True` self-closing HTML tags like &#39;&lt;img&gt;&#39;</span>\n<span class=\"sd\">        will not have a &#39;/&#39; placed before the &#39;&gt;&#39;.  Usually only necessary</span>\n<span class=\"sd\">        with XML and XHTML documents (as opposed to regular HTML).  Defaults</span>\n<span class=\"sd\">        to `False`.</span>\n<span class=\"sd\">    :type safe_mode: boolean</span>\n<span class=\"sd\">    :type whitelist: iterable</span>\n<span class=\"sd\">    :type replacement: string, &quot;entities&quot;, or &quot;off&quot;</span>\n<span class=\"sd\">    :type log_rejects: boolean</span>\n<span class=\"sd\">    :type ending_slash: boolean</span>\n\n<span class=\"sd\">    The `TagWrap` class may be used in a direct fashion (as opposed to the</span>\n<span class=\"sd\">    metaprogramming magic way: ``from htmltag import sometag``)::</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; from htmltag import TagWrap</span>\n<span class=\"sd\">        &gt;&gt;&gt; img = TagWrap(&#39;img&#39;, ending_slash=True)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(img(src=&quot;http://company.com/someimage.png&quot;))</span>\n<span class=\"sd\">        &lt;img src=&quot;http://company.com/someimage.png&quot; /&gt;</span>\n\n<span class=\"sd\">    The `TagWrap` class also has a :meth:`~TagWrap.copy` method which can be</span>\n<span class=\"sd\">    useful when you want a new tag to have the same attributes as another::</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; from htmltag import TagWrap</span>\n<span class=\"sd\">        &gt;&gt;&gt; whitelist = [&quot;b&quot;, &quot;i&quot;, &quot;strong&quot;, &quot;a&quot;, &quot;em&quot;]</span>\n<span class=\"sd\">        &gt;&gt;&gt; replacement = &quot;(tag not allowed)&quot;</span>\n<span class=\"sd\">        &gt;&gt;&gt; b = TagWrap(&#39;b&#39;, whitelist=whitelist, replacement=replacement)</span>\n<span class=\"sd\">        &gt;&gt;&gt; i = b.copy(&#39;i&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(i.whitelist)</span>\n<span class=\"sd\">        [&#39;b&#39;, &#39;i&#39;, &#39;strong&#39;, &#39;a&#39;, &#39;em&#39;]</span>\n\n<span class=\"sd\">    Here&#39;s how you can create a number of tags with your own custom settings all</span>\n<span class=\"sd\">    at once::</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; import sys</span>\n<span class=\"sd\">        &gt;&gt;&gt; from htmltag import TagWrap</span>\n<span class=\"sd\">        &gt;&gt;&gt; whitelist = [&quot;b&quot;, &quot;i&quot;, &quot;strong&quot;, &quot;a&quot;, &quot;em&quot;] # Whitelist ourselves</span>\n<span class=\"sd\">        &gt;&gt;&gt; replacement = &quot;(tag not allowed)&quot;</span>\n<span class=\"sd\">        &gt;&gt;&gt; for tag in whitelist:</span>\n<span class=\"sd\">        ...     setattr(sys.modules[__name__], tag,</span>\n<span class=\"sd\">        ...         TagWrap(tag, whitelist=whitelist, replacement=replacement))</span>\n<span class=\"sd\">        &gt;&gt;&gt; strong.replacement # doctest: +SKIP</span>\n<span class=\"sd\">        &#39;(tag not allowed)&#39;    # doctest: +SKIP</span>\n\n<span class=\"sd\">    .. note:: ``sys.modules[__name__]`` is the current module; the global &#39;self&#39;.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c\"># NOTE: The above doctest is skipped because it only works in reality :)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">tagname</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tagname</span> <span class=\"o\">=</span> <span class=\"n\">tagname</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">safe_mode</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">&#39;safe_mode&#39;</span><span class=\"p\">,</span> <span class=\"bp\">True</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">whitelist</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">&#39;whitelist&#39;</span><span class=\"p\">,</span> <span class=\"s\">&quot;off&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">replacement</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">&#39;replacement&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;(removed)&#39;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">log_rejects</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">&#39;log_rejects&#39;</span><span class=\"p\">,</span> <span class=\"bp\">False</span><span class=\"p\">)</span>\n        <span class=\"c\"># This only applies to self-closing tags:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ending_slash</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">&#39;ending_slash&#39;</span><span class=\"p\">,</span> <span class=\"bp\">False</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"TagWrap.escape\"><a class=\"viewcode-back\" href=\"../../#htmltag.TagWrap.escape\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">escape</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">string</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns *string* with all instances of &#39;&lt;&#39;, &#39;&gt;&#39;, and &#39;&amp;&#39; converted into</span>\n<span class=\"sd\">        HTML entities.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">html_entities</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">&quot;&amp;&quot;</span><span class=\"p\">:</span> <span class=\"s\">&quot;&amp;amp;&quot;</span><span class=\"p\">,</span> <span class=\"s\">&#39;&lt;&#39;</span><span class=\"p\">:</span> <span class=\"s\">&#39;&amp;lt;&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;&gt;&#39;</span><span class=\"p\">:</span> <span class=\"s\">&#39;&amp;gt;&#39;</span><span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">HTML</span><span class=\"p\">(</span><span class=\"s\">&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">html_entities</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">string</span><span class=\"p\">))</span>\n</div>\n<div class=\"viewcode-block\" id=\"TagWrap.wrap\"><a class=\"viewcode-back\" href=\"../../#htmltag.TagWrap.wrap\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">wrap</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns all *args* (strings) wrapped in HTML tags like so::</span>\n\n<span class=\"sd\">            &gt;&gt;&gt; b = TagWrap(&#39;b&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(b(&#39;bold text&#39;))</span>\n<span class=\"sd\">            &lt;b&gt;bold text&lt;/b&gt;</span>\n\n<span class=\"sd\">        To add attributes to the tag you can pass them as keyword arguments::</span>\n\n<span class=\"sd\">            &gt;&gt;&gt; a = TagWrap(&#39;a&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(a(&#39;awesome software&#39;, href=&#39;http://liftoffsoftware.com/&#39;))</span>\n<span class=\"sd\">            &lt;a href=&quot;http://liftoffsoftware.com/&quot;&gt;awesome software&lt;/a&gt;</span>\n\n<span class=\"sd\">        .. note:: :meth:`~TagWrap.wrap` will automatically convert &#39;&lt;&#39;, &#39;&gt;&#39;, \\</span>\n<span class=\"sd\">        and &#39;&amp;&#39; into HTML entities unless the wrapped string has an `__html__` \\</span>\n<span class=\"sd\">        method</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"s\">&quot;&lt;{tagstart}&gt;{content}&lt;/{tag}&gt;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">tag</span> <span class=\"ow\">in</span> <span class=\"n\">self_closing_tags</span><span class=\"p\">:</span>\n            <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"s\">&quot;&lt;{tagstart}&gt;&quot;</span> <span class=\"c\"># self-closing tags don&#39;t have content</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ending_slash</span><span class=\"p\">:</span>\n                <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"s\">&quot;&lt;{tagstart} /&gt;&quot;</span>\n        <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"s\">&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">string</span> <span class=\"ow\">in</span> <span class=\"n\">args</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"s\">&#39;__html__&#39;</span><span class=\"p\">):</span> <span class=\"c\"># Indicates already escaped</span>\n                <span class=\"n\">string</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">escape</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">)</span>\n            <span class=\"n\">content</span> <span class=\"o\">+=</span> <span class=\"n\">string</span><span class=\"o\">.</span><span class=\"n\">__html__</span><span class=\"p\">()</span>\n        <span class=\"n\">tagstart</span> <span class=\"o\">=</span> <span class=\"n\">tag</span>\n        <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"p\">:</span>\n            <span class=\"n\">tagstart</span> <span class=\"o\">+=</span> <span class=\"s\">&#39; &#39;</span>\n            <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">lstrip</span><span class=\"p\">(</span><span class=\"s\">&#39;_&#39;</span><span class=\"p\">)</span>\n                <span class=\"n\">tagstart</span> <span class=\"o\">=</span> <span class=\"n\">tagstart</span> <span class=\"o\">+</span> <span class=\"s\">&#39;{key}=&quot;{value}&quot; &#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                    <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">value</span><span class=\"p\">)</span>\n            <span class=\"n\">tagstart</span> <span class=\"o\">=</span> <span class=\"n\">tagstart</span><span class=\"o\">.</span><span class=\"n\">rstrip</span><span class=\"p\">()</span>\n        <span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">tagstart</span><span class=\"o\">=</span><span class=\"n\">tagstart</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"o\">=</span><span class=\"n\">content</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"o\">=</span><span class=\"n\">tag</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">safe_mode</span><span class=\"p\">:</span>\n            <span class=\"n\">html</span><span class=\"p\">,</span> <span class=\"n\">rejected</span> <span class=\"o\">=</span> <span class=\"n\">strip_xss</span><span class=\"p\">(</span>\n                <span class=\"n\">html</span><span class=\"p\">,</span> <span class=\"n\">whitelist</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">whitelist</span><span class=\"p\">,</span> <span class=\"n\">replacement</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">replacement</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">log_rejects</span><span class=\"p\">:</span>\n                <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                    <span class=\"s\">&quot;{name} rejected unsafe HTML: &#39;{rejected}&#39;&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__class__</span><span class=\"o\">.</span><span class=\"n\">__name__</span><span class=\"p\">,</span> <span class=\"n\">rejected</span><span class=\"o\">=</span><span class=\"n\">rejected</span><span class=\"p\">))</span>\n        <span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"n\">HTML</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">)</span>\n        <span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">tagname</span> <span class=\"o\">=</span> <span class=\"n\">tag</span> <span class=\"c\"># So we can easily append()</span>\n        <span class=\"k\">return</span> <span class=\"n\">html</span>\n</div>\n<div class=\"viewcode-block\" id=\"TagWrap.copy\"><a class=\"viewcode-back\" href=\"../../#htmltag.TagWrap.copy\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">tagname</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns a new instance of `TagWrap` using the given *tagname* that has</span>\n<span class=\"sd\">        all the same attributes as this instance.  If *kwargs* is given they</span>\n<span class=\"sd\">        will override the attributes of the created instance.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">new_kwargs</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s\">&#39;replacement&#39;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">replacement</span><span class=\"p\">,</span>\n            <span class=\"s\">&#39;whitelist&#39;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">whitelist</span><span class=\"p\">,</span>\n            <span class=\"s\">&#39;safe_mode&#39;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">safe_mode</span><span class=\"p\">,</span>\n            <span class=\"s\">&#39;log_rejects&#39;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">log_rejects</span><span class=\"p\">,</span>\n            <span class=\"s\">&#39;ending_slash&#39;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ending_slash</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">new_kwargs</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">TagWrap</span><span class=\"p\">(</span><span class=\"n\">tagname</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">new_kwargs</span><span class=\"p\">)</span>\n</div>\n    <span class=\"k\">def</span> <span class=\"nf\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">wrap</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tagname</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__getitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"s\">&quot;__all__&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ImportError</span><span class=\"p\">(</span><span class=\"s\">&quot;Cannot &#39;import *&#39; with htmltag.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s\">&#39;__&#39;</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s\">&quot;__&quot;</span><span class=\"p\">):</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span>\n            <span class=\"k\">elif</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__dict__</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__dict__</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ImportError</span><span class=\"p\">(</span>\n            <span class=\"s\">&quot;Using IPython?  Ignore that ^ traceback stuff and try again &quot;</span>\n            <span class=\"s\">&quot;(second time usually works to get your traceback)&quot;</span><span class=\"p\">)</span>\n</div>\n<div class=\"viewcode-block\" id=\"SelfWrap\"><a class=\"viewcode-back\" href=\"../../#htmltag.SelfWrap\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">SelfWrap</span><span class=\"p\">(</span><span class=\"n\">ModuleType</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    This class is the magic that lets us do things like::</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; from htmltag import span</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">tagname</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tagname</span> <span class=\"o\">=</span> <span class=\"n\">tagname</span>\n        <span class=\"c\"># This is necessary for reload() to work and so we don&#39;t overwrite</span>\n        <span class=\"c\"># these values with instances of TagWrap:</span>\n        <span class=\"n\">no_override</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"s\">&#39;HTML&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;SelfWrap&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;TagWrap&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;strip_xss&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;__author__&#39;</span><span class=\"p\">,</span>\n            <span class=\"s\">&#39;__builtins__&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;__doc__&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;__license__&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;__name__&#39;</span><span class=\"p\">,</span>\n            <span class=\"s\">&#39;__package__&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;__version__&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;__version_info__&#39;</span>\n        <span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">attr</span> <span class=\"ow\">in</span> <span class=\"n\">no_override</span><span class=\"p\">:</span>\n            <span class=\"nb\">setattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">attr</span><span class=\"p\">,</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">tagname</span><span class=\"p\">,</span> <span class=\"n\">attr</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">))</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__path__</span> <span class=\"o\">=</span> <span class=\"p\">[]</span> <span class=\"c\"># Required for Python 3.3</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__file__</span> <span class=\"o\">=</span> <span class=\"n\">FILE</span> <span class=\"c\"># Needed for Sphinx docs</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__getattr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span> <span class=\"c\"># &quot;from htmltag import a&quot; &lt;--*name* will be &#39;a&#39;</span>\n        <span class=\"c\"># This is how Python looks up the module name</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__dict__</span><span class=\"p\">:</span> <span class=\"c\"># So we don&#39;t overwrite what&#39;s already set</span>\n            <span class=\"c\"># Make our instance of TagWrap exist so we can return it properly</span>\n            <span class=\"nb\">setattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">TagWrap</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__dict__</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c\"># This turns the &#39;a&#39; in &quot;from htmltag import a&quot; into a callable:</span>\n        <span class=\"k\">return</span> <span class=\"n\">TagWrap</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tagname</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</div>\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">&quot;__main__&quot;</span><span class=\"p\">:</span>\n    <span class=\"c\"># NOTE: Execute `python htmltag.py -v` to run the doctests.</span>\n    <span class=\"c\"># Doctests should work in both Python 2 and Python 3.</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">doctest</span>\n    <span class=\"n\">doctest</span><span class=\"o\">.</span><span class=\"n\">testmod</span><span class=\"p\">()</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"bp\">self</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"p\">[</span><span class=\"n\">__name__</span><span class=\"p\">]</span>\n    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"p\">[</span><span class=\"n\">__name__</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">SelfWrap</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n</pre></div>", "title": "htmltag", "customsidebar": null, "current_page_name": "_modules/htmltag", "sidebars": null, "parents": [{"link": "../", "title": "Module code"}]}