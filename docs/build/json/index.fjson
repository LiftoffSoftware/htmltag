{"body": "<div class=\"section\" id=\"htmltag-py-safely-and-intuitively-construct-html-tags\">\n<h1>htmltag.py - Safely and intuitively construct HTML tags<a class=\"headerlink\" href=\"#htmltag-py-safely-and-intuitively-construct-html-tags\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<span style=\"float:right;\"><script data-gittip-username=\"liftoff\" src=\"https://www.gittip.com/assets/widgets/0002.js\"></script></span><p><em>Module author: Dan McDougall &lt;<a class=\"reference external\" href=\"mailto:daniel&#46;mcdougall&#37;&#52;&#48;liftoffsoftware&#46;com\">daniel<span>&#46;</span>mcdougall<span>&#64;</span>liftoffsoftware<span>&#46;</span>com</a>&gt;</em></p>\n<span class=\"target\" id=\"module-htmltag\"></span><div class=\"section\" id=\"the-htmltag-module\">\n<h2>The htmltag module<a class=\"headerlink\" href=\"#the-htmltag-module\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>The latest, complete documentation of htmltag can be found here:\n<a class=\"reference external\" href=\"http://liftoff.github.io/htmltag/\">http://liftoff.github.io/htmltag/</a></p>\n<p class=\"last\">The latest version of this module can be obtained from Github:\n<a class=\"reference external\" href=\"http://liftoff.github.io/htmltag/\">http://liftoff.github.io/htmltag/</a></p>\n</div>\n<p>htmltag.py - A Python (2 <em>and</em> 3) module for wrapping whatever strings you want\nin HTML tags. Example:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">htmltag</span> <span class=\"kn\">import</span> <span class=\"n\">strong</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">strong</span><span class=\"p\">(</span><span class=\"s\">&quot;SO STRONG!&quot;</span><span class=\"p\">))</span>\n<span class=\"go\">&lt;strong&gt;SO STRONG!&lt;/strong&gt;</span>\n</pre></div>\n</div>\n<p>What tags are supported?  All of them!  An important facet of modern web\nprogramming is the ability to use your own custom tags.  For example:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">htmltag</span> <span class=\"kn\">import</span> <span class=\"n\">foobar</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">foobar</span><span class=\"p\">(</span><span class=\"s\">&#39;Custom tag example&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;&lt;foobar&gt;Custom tag example&lt;/foobar&gt;&#39;</span>\n</pre></div>\n</div>\n<p>To add attributes inside your tag just pass them as keyword arguments:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">htmltag</span> <span class=\"kn\">import</span> <span class=\"n\">a</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"s\">&#39;awesome software&#39;</span><span class=\"p\">,</span> <span class=\"n\">href</span><span class=\"o\">=</span><span class=\"s\">&#39;http://liftoffsoftware.com/&#39;</span><span class=\"p\">))</span>\n<span class=\"go\">&lt;a href=&quot;http://liftoffsoftware.com/&quot;&gt;awesome software&lt;/a&gt;</span>\n</pre></div>\n</div>\n<p>To work around the problem of reserved words as keyword arguments (i.e. can't\nhave 'class=&quot;foo&quot;') just prefix the keyword with an underscore like so:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">htmltag</span> <span class=\"kn\">import</span> <span class=\"n\">div</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"s\">&quot;example&quot;</span><span class=\"p\">,</span> <span class=\"n\">_class</span><span class=\"o\">=</span><span class=\"s\">&quot;someclass&quot;</span><span class=\"p\">))</span>\n<span class=\"go\">&lt;div class=&quot;someclass&quot;&gt;example&lt;/div&gt;</span>\n</pre></div>\n</div>\n<p>Another option--which is useful for things like 'data-*' attributes--is to pass\nkeyword arguments as a dict using the <a class=\"reference external\" href=\"http://docs.python.org/2/tutorial/controlflow.html#unpacking-argument-lists\">** operator</a>\nlike so:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">htmltag</span> <span class=\"kn\">import</span> <span class=\"n\">li</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">li</span><span class=\"p\">(</span><span class=\"s\">&quot;CEO&quot;</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"p\">{</span><span class=\"s\">&quot;class&quot;</span><span class=\"p\">:</span> <span class=\"s\">&quot;user&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;data-name&quot;</span><span class=\"p\">:</span> <span class=\"s\">&quot;Dan McDougall&quot;</span><span class=\"p\">}))</span>\n<span class=\"go\">&lt;li class=&quot;user&quot; data-name=&quot;Dan McDougall&quot;&gt;CEO&lt;/li&gt;</span>\n</pre></div>\n</div>\n<p>If you want to use upper-case tags just import them in caps:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">htmltag</span> <span class=\"kn\">import</span> <span class=\"n\">STRONG</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">STRONG</span><span class=\"p\">(</span><span class=\"s\">&#39;whatever&#39;</span><span class=\"p\">))</span>\n<span class=\"go\">&lt;STRONG&gt;whatever&lt;/STRONG&gt;</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"combining-tags-and-content\">\n<h3>Combining Tags and Content<a class=\"headerlink\" href=\"#combining-tags-and-content\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>You can combine multiple tags to create a larger HTML string like so:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">htmltag</span> <span class=\"kn\">import</span> <span class=\"n\">table</span><span class=\"p\">,</span> <span class=\"n\">tr</span><span class=\"p\">,</span> <span class=\"n\">td</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">tr</span><span class=\"p\">(</span><span class=\"n\">td</span><span class=\"p\">(</span><span class=\"s\">&#39;100&#39;</span><span class=\"p\">),</span> <span class=\"n\">td</span><span class=\"p\">(</span><span class=\"s\">&#39;200&#39;</span><span class=\"p\">),</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s\">&quot;row1&quot;</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>    <span class=\"n\">tr</span><span class=\"p\">(</span><span class=\"n\">td</span><span class=\"p\">(</span><span class=\"s\">&#39;150&#39;</span><span class=\"p\">),</span> <span class=\"n\">td</span><span class=\"p\">(</span><span class=\"s\">&#39;250&#39;</span><span class=\"p\">),</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s\">&quot;row2&quot;</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span><span class=\"p\">))</span>\n<span class=\"go\">&lt;table&gt;&lt;tr id=&quot;row1&quot;&gt;&lt;td&gt;100&lt;/td&gt;&lt;td&gt;200&lt;/td&gt;&lt;/tr&gt;&lt;tr id=&quot;row2&quot;&gt;&lt;td&gt;150&lt;/td&gt;&lt;td&gt;250&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span>\n</pre></div>\n</div>\n<p><strong>NOTE:</strong> If you're going to do something like the above please use a <em>real</em>\ntemplate language/module instead of <a class=\"reference internal\" href=\"#module-htmltag\" title=\"htmltag\"><tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">htmltag</span></tt></a>.  You're <em>probably</em> &quot;doing it\nwrong&quot; if you end up with something like the above in your code.  For example,\ntry <a class=\"reference external\" href=\"http://www.tornadoweb.org/en/stable/template.html\">Tornado's template engine</a>.</p>\n</div>\n<div class=\"section\" id=\"special-characters\">\n<h3>Special Characters<a class=\"headerlink\" href=\"#special-characters\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Special characters that cause trouble like, '&lt;', '&gt;', and '&amp;' will be\nautomatically converted into HTML entities.  If you don't want that to happen\njust wrap your string in <a class=\"reference internal\" href=\"#htmltag.HTML\" title=\"htmltag.HTML\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">htmltag.HTML</span></tt></a> like so:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">htmltag</span> <span class=\"kn\">import</span> <span class=\"n\">HTML</span><span class=\"p\">,</span> <span class=\"n\">a</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">txt</span> <span class=\"o\">=</span> <span class=\"n\">HTML</span><span class=\"p\">(</span><span class=\"s\">&quot;&lt;strong&gt;I am already HTML. Don&#39;t escape me!&lt;/strong&gt;&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">txt</span><span class=\"p\">,</span> <span class=\"n\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;http://liftoffsoftware.com/&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;&lt;a href=&quot;http://liftoffsoftware.com/&quot;&gt;&lt;strong&gt;I am already HTML. Don\\&#39;t escape me!&lt;/strong&gt;&lt;/a&gt;&#39;</span>\n</pre></div>\n</div>\n<p>Since Python doesn't allow modules to have dashes (-) in their names, if you\nneed to create a tag like that just use an underscore and change its 'tagname'\nattribute:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">htmltag</span> <span class=\"kn\">import</span> <span class=\"n\">foo_bar</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">foo_bar</span><span class=\"p\">(</span><span class=\"s\">&#39;baz&#39;</span><span class=\"p\">))</span> <span class=\"c\"># Before</span>\n<span class=\"go\">&#39;&lt;foo_bar&gt;baz&lt;/foo_bar&gt;&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">foo_bar</span><span class=\"o\">.</span><span class=\"n\">tagname</span> <span class=\"o\">=</span> <span class=\"s\">&#39;foo-bar&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">foo_bar</span><span class=\"p\">(</span><span class=\"s\">&#39;baz&#39;</span><span class=\"p\">))</span> <span class=\"c\"># Before</span>\n<span class=\"go\">&#39;&lt;foo-bar&gt;baz&lt;/foo-bar&gt;&#39;</span>\n</pre></div>\n</div>\n<p>By default self-closing HTML tags like '&lt;img&gt;' will not include an ending slash.\nTo change this behavior (i.e. for XHTML) just set 'ending_slash' to <a class=\"reference external\" href=\"http://docs.python.org/library/constants.html#True\" title=\"(in Python v2.7)\"><tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">True</span></tt></a>:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">htmltag</span> <span class=\"kn\">import</span> <span class=\"n\">img</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">ending_slash</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"o\">=</span><span class=\"s\">&quot;http://somehost/images/image.png&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;&lt;img src=&quot;http://somehost/images/image.png&quot; /&gt;&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">ending_slash</span> <span class=\"o\">=</span> <span class=\"bp\">False</span> <span class=\"c\"># Reset for later doctests</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"protections-against-cross-site-scripting-xss\">\n<h3>Protections Against Cross-Site Scripting (XSS)<a class=\"headerlink\" href=\"#protections-against-cross-site-scripting-xss\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>By default all unsafe (XSS) content in HTML tags will be removed:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">htmltag</span> <span class=\"kn\">import</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">img</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"o\">=</span><span class=\"s\">&quot;javascript:alert(&#39;pwned!&#39;)&quot;</span><span class=\"p\">),</span> <span class=\"n\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;http://hacker/&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;&lt;a href=&quot;http://hacker/&quot;&gt;(removed)&lt;/a&gt;&#39;</span>\n</pre></div>\n</div>\n<p>If you want to change this behavior set the tag's 'safe_mode' attribute like\nso:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">htmltag</span> <span class=\"kn\">import</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">img</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">safe_mode</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">safe_mode</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"o\">=</span><span class=\"s\">&quot;javascript:alert(&#39;pwned!&#39;)&quot;</span><span class=\"p\">),</span> <span class=\"n\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;http://hacker/&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;&lt;a href=&quot;http://hacker/&quot;&gt;&lt;img src=&quot;javascript:alert(\\&#39;pwned!\\&#39;)&quot;&gt;&lt;/a&gt;&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">safe_mode</span> <span class=\"o\">=</span> <span class=\"bp\">True</span> <span class=\"c\"># Reset for later doctests</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">safe_mode</span> <span class=\"o\">=</span> <span class=\"bp\">True</span> <span class=\"c\"># Ditto</span>\n</pre></div>\n</div>\n<p>You may also change the replacement text if you like:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">htmltag</span> <span class=\"kn\">import</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">img</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">replacement</span> <span class=\"o\">=</span> <span class=\"s\">&quot;No no no!&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"o\">=</span><span class=\"s\">&quot;javascript:alert(&#39;pwned!&#39;)&quot;</span><span class=\"p\">),</span> <span class=\"n\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;http://hacker/&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;&lt;a href=&quot;http://hacker/&quot;&gt;No no no!&lt;/a&gt;&#39;</span>\n</pre></div>\n</div>\n<p>If you set 'replacement' to 'entities' the rejected HTML will be converted to\ncharacter entities like so:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">htmltag</span> <span class=\"kn\">import</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">img</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">replacement</span> <span class=\"o\">=</span> <span class=\"s\">&quot;entities&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">replacement</span> <span class=\"o\">=</span> <span class=\"s\">&quot;entities&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"o\">=</span><span class=\"s\">&quot;javascript:alert(&#39;pwned!&#39;)&quot;</span><span class=\"p\">),</span> <span class=\"n\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;http://hacker/&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;&lt;a href=&quot;http://hacker/&quot;&gt;&amp;lt;img src=&quot;javascript:alert(\\&#39;pwned!\\&#39;)&quot;&amp;gt;&lt;/a&gt;&#39;</span>\n</pre></div>\n</div>\n<p>It is also possible to create a whitelist of allowed tags.  All other tags\ncontained therein will automatically be replaced:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">htmltag</span> <span class=\"kn\">import</span> <span class=\"n\">span</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">whitelist</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">&#39;span&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;i&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;strong&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">span</span><span class=\"o\">.</span><span class=\"n\">whitelist</span> <span class=\"o\">=</span> <span class=\"n\">whitelist</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">span</span><span class=\"p\">(</span><span class=\"n\">HTML</span><span class=\"p\">(</span><span class=\"s\">&#39;This is &lt;b&gt;bold&lt;/b&gt; new lib is &lt;script&gt;awesome();&lt;/script&gt;&#39;</span><span class=\"p\">))</span>\n<span class=\"go\">&#39;&lt;span&gt;This is &lt;b&gt;bold&lt;/b&gt; new lib is (removed)awesome();(removed)&lt;/span&gt;&#39;</span>\n</pre></div>\n</div>\n<p>Lastly, all strings returned by <a class=\"reference internal\" href=\"#module-htmltag\" title=\"htmltag\"><tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">htmltag</span></tt></a> are actually a subclass of <a class=\"reference external\" href=\"http://docs.python.org/library/functions.html#str\" title=\"(in Python v2.7)\"><tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">str</span></tt></a>:\n<a class=\"reference internal\" href=\"#htmltag.HTML\" title=\"htmltag.HTML\"><tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">HTML</span></tt></a>.  It has a useful <tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">escaped</span></tt> property:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">htmltag</span> <span class=\"kn\">import</span> <span class=\"n\">address</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">address</span><span class=\"o\">.</span><span class=\"n\">safe_mode</span> <span class=\"o\">=</span> <span class=\"bp\">False</span> <span class=\"c\"># Turn off so we have a dangerous example ;)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"n\">address</span><span class=\"p\">(</span><span class=\"s\">&#39;1 Hacker Ln., Nowhere, USA&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;address&gt;1 Hacker Ln., Nowhere, USA&lt;/address&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">escaped</span><span class=\"p\">)</span>\n<span class=\"go\">&amp;lt;address&amp;gt;1 Hacker Ln., Nowhere, USA&amp;lt;/address&amp;gt;</span>\n</pre></div>\n</div>\n<p>This can be extremely useful if you want to be double-sure that no executable\nstuff ends up in your program's output.</p>\n</div>\n</div>\n<div class=\"section\" id=\"functions-and-classes\">\n<h2>Functions and Classes<a class=\"headerlink\" href=\"#functions-and-classes\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"class\">\n<dt id=\"htmltag.TagWrap\">\n<em class=\"property\">class </em><tt class=\"descclassname\">htmltag.</tt><tt class=\"descname\">TagWrap</tt><big>(</big><em>tagname</em>, <em>**kwargs</em><big>)</big><a class=\"reference internal\" href=\"_modules/htmltag/#TagWrap\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#htmltag.TagWrap\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Lets you wrap whatever string you want in whatever HTML tag (<em>tagname</em>) you\nwant.</p>\n<p><strong>Optional Keyword Arguments:</strong></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\">\n<li><strong>safe_mode</strong> (<em>boolean</em>) -- If <a class=\"reference external\" href=\"http://docs.python.org/library/constants.html#True\" title=\"(in Python v2.7)\"><tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">True</span></tt></a> dangerous (XSS) content will be removed\nfrom all HTML.  Defaults to <a class=\"reference external\" href=\"http://docs.python.org/library/constants.html#True\" title=\"(in Python v2.7)\"><tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">True</span></tt></a></li>\n<li><strong>whitelist</strong> (<em>iterable</em>) -- If given only tags that exist in the whitelist will be\nallowed.  All else will be escaped into HTML entities.</li>\n<li><strong>replacement</strong> (<em>string, &quot;entities&quot;, or &quot;off&quot;</em>) -- A string to replace unsafe HTML with.  If set to\n&quot;entities&quot;, will convert unsafe tags to HTML entities so they\ndisplay as-is but won't be evaluated by renderers/browsers'.  The\ndefaults is &quot;(removed)&quot;.</li>\n<li><strong>log_rejects</strong> (<em>boolean</em>) -- If <a class=\"reference external\" href=\"http://docs.python.org/library/constants.html#True\" title=\"(in Python v2.7)\"><tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">True</span></tt></a> rejected unsafe (XSS) HTML will be\nlogged using <tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">logging.error()</span></tt>.  Defaults to <a class=\"reference external\" href=\"http://docs.python.org/library/constants.html#False\" title=\"(in Python v2.7)\"><tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">False</span></tt></a></li>\n<li><strong>ending_slash</strong> (<em>boolean</em>) -- If <a class=\"reference external\" href=\"http://docs.python.org/library/constants.html#True\" title=\"(in Python v2.7)\"><tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">True</span></tt></a> self-closing HTML tags like '&lt;img&gt;'\nwill not have a '/' placed before the '&gt;'.  Usually only necessary\nwith XML and XHTML documents (as opposed to regular HTML).  Defaults\nto <a class=\"reference external\" href=\"http://docs.python.org/library/constants.html#False\" title=\"(in Python v2.7)\"><tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">False</span></tt></a>.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The <a class=\"reference internal\" href=\"#htmltag.TagWrap\" title=\"htmltag.TagWrap\"><tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">TagWrap</span></tt></a> class may be used in a direct fashion (as opposed to the\nmetaprogramming magic way: <tt class=\"docutils literal\"><span class=\"pre\">from</span> <span class=\"pre\">htmltag</span> <span class=\"pre\">import</span> <span class=\"pre\">sometag</span></tt>):</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">htmltag</span> <span class=\"kn\">import</span> <span class=\"n\">TagWrap</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">TagWrap</span><span class=\"p\">(</span><span class=\"s\">&#39;img&#39;</span><span class=\"p\">,</span> <span class=\"n\">ending_slash</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"o\">=</span><span class=\"s\">&quot;http://company.com/someimage.png&quot;</span><span class=\"p\">))</span>\n<span class=\"go\">&lt;img src=&quot;http://company.com/someimage.png&quot; /&gt;</span>\n</pre></div>\n</div>\n<p>The <a class=\"reference internal\" href=\"#htmltag.TagWrap\" title=\"htmltag.TagWrap\"><tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">TagWrap</span></tt></a> class also has a <a class=\"reference internal\" href=\"#htmltag.TagWrap.copy\" title=\"htmltag.TagWrap.copy\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">copy()</span></tt></a> method which can be\nuseful when you want a new tag to have the same attributes as another:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">htmltag</span> <span class=\"kn\">import</span> <span class=\"n\">TagWrap</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">whitelist</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">&quot;b&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;i&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;strong&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;em&quot;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">replacement</span> <span class=\"o\">=</span> <span class=\"s\">&quot;(tag not allowed)&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">TagWrap</span><span class=\"p\">(</span><span class=\"s\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"n\">whitelist</span><span class=\"o\">=</span><span class=\"n\">whitelist</span><span class=\"p\">,</span> <span class=\"n\">replacement</span><span class=\"o\">=</span><span class=\"n\">replacement</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"s\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">whitelist</span><span class=\"p\">)</span>\n<span class=\"go\">[&#39;b&#39;, &#39;i&#39;, &#39;strong&#39;, &#39;a&#39;, &#39;em&#39;]</span>\n</pre></div>\n</div>\n<p>Here's how you can create a number of tags with your own custom settings all\nat once:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">htmltag</span> <span class=\"kn\">import</span> <span class=\"n\">TagWrap</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">whitelist</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">&quot;b&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;i&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;strong&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;em&quot;</span><span class=\"p\">]</span> <span class=\"c\"># Whitelist ourselves</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">replacement</span> <span class=\"o\">=</span> <span class=\"s\">&quot;(tag not allowed)&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">tag</span> <span class=\"ow\">in</span> <span class=\"n\">whitelist</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>    <span class=\"nb\">setattr</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"p\">[</span><span class=\"n\">__name__</span><span class=\"p\">],</span> <span class=\"n\">tag</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"n\">TagWrap</span><span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"p\">,</span> <span class=\"n\">whitelist</span><span class=\"o\">=</span><span class=\"n\">whitelist</span><span class=\"p\">,</span> <span class=\"n\">replacement</span><span class=\"o\">=</span><span class=\"n\">replacement</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">strong</span><span class=\"o\">.</span><span class=\"n\">replacement</span> \n<span class=\"go\">&#39;(tag not allowed)&#39;    </span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\"><tt class=\"docutils literal\"><span class=\"pre\">sys.modules[__name__]</span></tt> is the current module; the global 'self'.</p>\n</div>\n<dl class=\"attribute\">\n<dt id=\"htmltag.TagWrap.__weakref__\">\n<tt class=\"descname\">__weakref__</tt><a class=\"headerlink\" href=\"#htmltag.TagWrap.__weakref__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>list of weak references to the object (if defined)</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"htmltag.TagWrap.copy\">\n<tt class=\"descname\">copy</tt><big>(</big><em>tagname</em>, <em>**kwargs</em><big>)</big><a class=\"reference internal\" href=\"_modules/htmltag/#TagWrap.copy\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#htmltag.TagWrap.copy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a new instance of <a class=\"reference internal\" href=\"#htmltag.TagWrap\" title=\"htmltag.TagWrap\"><tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">TagWrap</span></tt></a> using the given <em>tagname</em> that has\nall the same attributes as this instance.  If <em>kwargs</em> is given they\nwill override the attributes of the created instance.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"htmltag.TagWrap.escape\">\n<tt class=\"descname\">escape</tt><big>(</big><em>string</em><big>)</big><a class=\"reference internal\" href=\"_modules/htmltag/#TagWrap.escape\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#htmltag.TagWrap.escape\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns <em>string</em> with all instances of '&lt;', '&gt;', and '&amp;' converted into\nHTML entities.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"htmltag.TagWrap.wrap\">\n<tt class=\"descname\">wrap</tt><big>(</big><em>tag</em>, <em>*args</em>, <em>**kwargs</em><big>)</big><a class=\"reference internal\" href=\"_modules/htmltag/#TagWrap.wrap\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#htmltag.TagWrap.wrap\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns all <em>args</em> (strings) wrapped in HTML tags like so:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">TagWrap</span><span class=\"p\">(</span><span class=\"s\">&#39;b&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">(</span><span class=\"s\">&#39;bold text&#39;</span><span class=\"p\">))</span>\n<span class=\"go\">&lt;b&gt;bold text&lt;/b&gt;</span>\n</pre></div>\n</div>\n<p>To add attributes to the tag you can pass them as keyword arguments:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">TagWrap</span><span class=\"p\">(</span><span class=\"s\">&#39;a&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"s\">&#39;awesome software&#39;</span><span class=\"p\">,</span> <span class=\"n\">href</span><span class=\"o\">=</span><span class=\"s\">&#39;http://liftoffsoftware.com/&#39;</span><span class=\"p\">))</span>\n<span class=\"go\">&lt;a href=&quot;http://liftoffsoftware.com/&quot;&gt;awesome software&lt;/a&gt;</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\"><a class=\"reference internal\" href=\"#htmltag.TagWrap.wrap\" title=\"htmltag.TagWrap.wrap\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">wrap()</span></tt></a> will automatically convert '&lt;', '&gt;',         and '&amp;' into HTML entities unless the wrapped string has an <tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">__html__</span></tt>         method</p>\n</div>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"strip-xss\">\n<h2>strip_xss()<a class=\"headerlink\" href=\"#strip-xss\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"function\">\n<dt id=\"htmltag.strip_xss\">\n<tt class=\"descclassname\">htmltag.</tt><tt class=\"descname\">strip_xss</tt><big>(</big><em>html</em>, <em>whitelist=None</em>, <em>replacement='(removed)'</em><big>)</big><a class=\"reference internal\" href=\"_modules/htmltag/#strip_xss\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#htmltag.strip_xss\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This function returns a tuple containing:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><em>html</em> with all non-whitelisted HTML tags replaced with <em>replacement</em>.</li>\n<li>A <tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">set()</span></tt> containing the tags that were removed.</li>\n</ul>\n</div></blockquote>\n<p>Any tags that contain JavaScript, VBScript, or other known XSS/executable\nfunctions will also be removed.</p>\n<p>If <em>whitelist</em> is not given the following will be used:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">whitelist</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">([</span>\n    <span class=\"s\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;abbr&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;aside&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;audio&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;bdi&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;bdo&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;blockquote&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;canvas&#39;</span><span class=\"p\">,</span>\n    <span class=\"s\">&#39;caption&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;code&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;col&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;colgroup&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;data&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;dd&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;del&#39;</span><span class=\"p\">,</span>\n    <span class=\"s\">&#39;details&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;div&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;dl&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;dt&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;em&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;figcaption&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;figure&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;h1&#39;</span><span class=\"p\">,</span>\n    <span class=\"s\">&#39;h2&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;h3&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;h4&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;h5&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;h6&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;hr&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;i&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;img&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;ins&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;kbd&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;li&#39;</span><span class=\"p\">,</span>\n    <span class=\"s\">&#39;mark&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;ol&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;p&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;pre&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;q&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;rp&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;rt&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;ruby&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;s&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;samp&#39;</span><span class=\"p\">,</span>\n    <span class=\"s\">&#39;small&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;source&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;span&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;strong&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;sub&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;summary&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;sup&#39;</span><span class=\"p\">,</span>\n    <span class=\"s\">&#39;table&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;td&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;th&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;time&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;tr&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;track&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;u&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;ul&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;var&#39;</span><span class=\"p\">,</span>\n    <span class=\"s\">&#39;video&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;wbr&#39;</span>\n<span class=\"p\">])</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">To disable the whitelisting simply set <tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">whitelist=&quot;off&quot;</span></tt>.</p>\n</div>\n<p>Example:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"s\">&#39;&lt;span&gt;Hello, exploit: &lt;img src=&quot;javascript:alert(&quot;pwned!&quot;)&quot;&gt;&lt;/span&gt;&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">html</span><span class=\"p\">,</span> <span class=\"n\">rejects</span> <span class=\"o\">=</span> <span class=\"n\">strip_xss</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">&quot;&#39;</span><span class=\"si\">%s</span><span class=\"s\">&#39;, Rejected: &#39;</span><span class=\"si\">%s</span><span class=\"s\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">,</span> <span class=\"s\">&quot; &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">rejects</span><span class=\"p\">)))</span>\n<span class=\"go\">&#39;&lt;span&gt;Hello, exploit: (removed)&lt;/span&gt;&#39;, Rejected: &#39;&lt;img src=&quot;javascript:alert(&quot;pwned!&quot;)&quot;&gt;&#39;</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">The default <em>replacement</em> is &quot;(removed)&quot;.</p>\n</div>\n<p>If <em>replacement</em> is &quot;entities&quot; bad HTML tags will be encoded into HTML\nentities.  This allows things like &lt;script&gt;'whatever'&lt;/script&gt; to be\ndisplayed without execution (which would be much less annoying to users that\nwere merely trying to share a code example).  Here's an example:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"s\">&#39;&lt;span&gt;Hello, exploit: &lt;img src=&quot;javascript:alert(&quot;pwned!&quot;)&quot;&gt;&lt;/span&gt;&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">html</span><span class=\"p\">,</span> <span class=\"n\">rejects</span> <span class=\"o\">=</span> <span class=\"n\">strip_xss</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">,</span> <span class=\"n\">replacement</span><span class=\"o\">=</span><span class=\"s\">&quot;entities&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;span&gt;Hello, exploit: &amp;lt;img src=&quot;javascript:alert(&quot;pwned!&quot;)&quot;&amp;gt;&lt;/span&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">&quot;Rejected: &#39;</span><span class=\"si\">%s</span><span class=\"s\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"s\">&quot;, &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">rejects</span><span class=\"p\">))</span>\n<span class=\"go\">Rejected: &#39;&lt;img src=&quot;javascript:alert(&quot;pwned!&quot;)&quot;&gt;&#39;</span>\n</pre></div>\n</div>\n<p><strong>NOTE:</strong> This function should work to protect against <em>all</em> <a class=\"reference external\" href=\"https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\">the XSS\nexamples at OWASP</a>.  Please\n<a class=\"reference external\" href=\"https://github.com/LiftoffSoftware/htmltag/issues\">let us know</a> if you\nfind something we missed.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"html\">\n<h2>HTML()<a class=\"headerlink\" href=\"#html\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"class\">\n<dt id=\"htmltag.HTML\">\n<em class=\"property\">class </em><tt class=\"descclassname\">htmltag.</tt><tt class=\"descname\">HTML</tt><a class=\"reference internal\" href=\"_modules/htmltag/#HTML\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#htmltag.HTML\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><div class=\"versionadded\">\n<p><span>New in version 1.2.0.</span></p>\n</div>\n<p>A subclass of Python's built-in <a class=\"reference external\" href=\"http://docs.python.org/library/functions.html#str\" title=\"(in Python v2.7)\"><tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">str</span></tt></a> to add a simple <a class=\"reference internal\" href=\"#htmltag.HTML.__html__\" title=\"htmltag.HTML.__html__\"><tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">__html__</span></tt></a> method\nthat lets us know this string is HTML and does not need to be escaped.  It\nalso has an <a class=\"reference internal\" href=\"#htmltag.HTML.escaped\" title=\"htmltag.HTML.escaped\"><tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">escaped</span></tt></a> property that will return <tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">self</span></tt> with all special\ncharacters converted into HTML entities.</p>\n<dl class=\"method\">\n<dt id=\"htmltag.HTML.__html__\">\n<tt class=\"descname\">__html__</tt><big>(</big><big>)</big><a class=\"reference internal\" href=\"_modules/htmltag/#HTML.__html__\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#htmltag.HTML.__html__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns <tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">self</span></tt> (we're already a string) in unmodified form.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"htmltag.HTML.append\">\n<tt class=\"descname\">append</tt><big>(</big><em>*strings</em><big>)</big><a class=\"reference internal\" href=\"_modules/htmltag/#HTML.append\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#htmltag.HTML.append\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Adds any number of supplied <em>strings</em> to <tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">self</span></tt> (we're a subclass of\n<a class=\"reference external\" href=\"http://docs.python.org/library/functions.html#str\" title=\"(in Python v2.7)\"><tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">str</span></tt></a> remember) just before the last closing tag and returns a new\ninstance of <a class=\"reference internal\" href=\"#htmltag.HTML\" title=\"htmltag.HTML\"><tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">HTML</span></tt></a> with the result.\nExample:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">htmltag</span> <span class=\"kn\">import</span> <span class=\"n\">span</span><span class=\"p\">,</span> <span class=\"n\">b</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"n\">span</span><span class=\"p\">(</span><span class=\"s\">&#39;Test:&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;span&gt;Test:&lt;/span&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s\">&#39; &#39;</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">(</span><span class=\"s\">&#39;appended&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;span&gt;Test: &lt;b&gt;appended&lt;/b&gt;&lt;/span&gt;</span>\n</pre></div>\n</div>\n<p>In the case of self-closing tags like '&lt;img&gt;' the string will simply be\nappended after the tag:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">htmltag</span> <span class=\"kn\">import</span> <span class=\"n\">img</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"o\">=</span><span class=\"s\">&quot;http://company.com/image.png&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s\">&quot;Appended string&quot;</span><span class=\"p\">))</span>\n<span class=\"go\">&lt;img src=&quot;http://company.com/image.png&quot;&gt;Appended string</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Why not update ourselves in-place?  Because we're a subclass\nof <a class=\"reference external\" href=\"http://docs.python.org/library/functions.html#str\" title=\"(in Python v2.7)\"><tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">str</span></tt></a>; in Python strings are immutable.</p>\n</div>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"htmltag.HTML.escaped\">\n<tt class=\"descname\">escaped</tt><a class=\"reference internal\" href=\"_modules/htmltag/#HTML.escaped\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#htmltag.HTML.escaped\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A property that returns <tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">self</span></tt> with all characters that have special\nmeaning (in HTML/XML) replaced with HTML entities.  Example:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">HTML</span><span class=\"p\">(</span><span class=\"s\">&#39;&lt;span&gt;These span tags will be escaped&lt;/span&gt;&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">escaped</span><span class=\"p\">)</span>\n<span class=\"go\">&amp;lt;span&amp;gt;These span tags will be escaped&amp;lt;/span&amp;gt;</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"tagwrap\">\n<h2>TagWrap()<a class=\"headerlink\" href=\"#tagwrap\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"class\">\n<dt>\n<em class=\"property\">class </em><tt class=\"descclassname\">htmltag.</tt><tt class=\"descname\">TagWrap</tt><big>(</big><em>tagname</em>, <em>**kwargs</em><big>)</big><a class=\"reference internal\" href=\"_modules/htmltag/#TagWrap\"><span class=\"viewcode-link\">[source]</span></a></dt>\n<dd><p>Lets you wrap whatever string you want in whatever HTML tag (<em>tagname</em>) you\nwant.</p>\n<p><strong>Optional Keyword Arguments:</strong></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\">\n<li><strong>safe_mode</strong> (<em>boolean</em>) -- If <a class=\"reference external\" href=\"http://docs.python.org/library/constants.html#True\" title=\"(in Python v2.7)\"><tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">True</span></tt></a> dangerous (XSS) content will be removed\nfrom all HTML.  Defaults to <a class=\"reference external\" href=\"http://docs.python.org/library/constants.html#True\" title=\"(in Python v2.7)\"><tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">True</span></tt></a></li>\n<li><strong>whitelist</strong> (<em>iterable</em>) -- If given only tags that exist in the whitelist will be\nallowed.  All else will be escaped into HTML entities.</li>\n<li><strong>replacement</strong> (<em>string, &quot;entities&quot;, or &quot;off&quot;</em>) -- A string to replace unsafe HTML with.  If set to\n&quot;entities&quot;, will convert unsafe tags to HTML entities so they\ndisplay as-is but won't be evaluated by renderers/browsers'.  The\ndefaults is &quot;(removed)&quot;.</li>\n<li><strong>log_rejects</strong> (<em>boolean</em>) -- If <a class=\"reference external\" href=\"http://docs.python.org/library/constants.html#True\" title=\"(in Python v2.7)\"><tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">True</span></tt></a> rejected unsafe (XSS) HTML will be\nlogged using <tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">logging.error()</span></tt>.  Defaults to <a class=\"reference external\" href=\"http://docs.python.org/library/constants.html#False\" title=\"(in Python v2.7)\"><tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">False</span></tt></a></li>\n<li><strong>ending_slash</strong> (<em>boolean</em>) -- If <a class=\"reference external\" href=\"http://docs.python.org/library/constants.html#True\" title=\"(in Python v2.7)\"><tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">True</span></tt></a> self-closing HTML tags like '&lt;img&gt;'\nwill not have a '/' placed before the '&gt;'.  Usually only necessary\nwith XML and XHTML documents (as opposed to regular HTML).  Defaults\nto <a class=\"reference external\" href=\"http://docs.python.org/library/constants.html#False\" title=\"(in Python v2.7)\"><tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">False</span></tt></a>.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The <a class=\"reference internal\" href=\"#htmltag.TagWrap\" title=\"htmltag.TagWrap\"><tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">TagWrap</span></tt></a> class may be used in a direct fashion (as opposed to the\nmetaprogramming magic way: <tt class=\"docutils literal\"><span class=\"pre\">from</span> <span class=\"pre\">htmltag</span> <span class=\"pre\">import</span> <span class=\"pre\">sometag</span></tt>):</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">htmltag</span> <span class=\"kn\">import</span> <span class=\"n\">TagWrap</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">TagWrap</span><span class=\"p\">(</span><span class=\"s\">&#39;img&#39;</span><span class=\"p\">,</span> <span class=\"n\">ending_slash</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"o\">=</span><span class=\"s\">&quot;http://company.com/someimage.png&quot;</span><span class=\"p\">))</span>\n<span class=\"go\">&lt;img src=&quot;http://company.com/someimage.png&quot; /&gt;</span>\n</pre></div>\n</div>\n<p>The <a class=\"reference internal\" href=\"#htmltag.TagWrap\" title=\"htmltag.TagWrap\"><tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">TagWrap</span></tt></a> class also has a <a class=\"reference internal\" href=\"#htmltag.TagWrap.copy\" title=\"htmltag.TagWrap.copy\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">copy()</span></tt></a> method which can be\nuseful when you want a new tag to have the same attributes as another:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">htmltag</span> <span class=\"kn\">import</span> <span class=\"n\">TagWrap</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">whitelist</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">&quot;b&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;i&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;strong&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;em&quot;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">replacement</span> <span class=\"o\">=</span> <span class=\"s\">&quot;(tag not allowed)&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">TagWrap</span><span class=\"p\">(</span><span class=\"s\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"n\">whitelist</span><span class=\"o\">=</span><span class=\"n\">whitelist</span><span class=\"p\">,</span> <span class=\"n\">replacement</span><span class=\"o\">=</span><span class=\"n\">replacement</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"s\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">whitelist</span><span class=\"p\">)</span>\n<span class=\"go\">[&#39;b&#39;, &#39;i&#39;, &#39;strong&#39;, &#39;a&#39;, &#39;em&#39;]</span>\n</pre></div>\n</div>\n<p>Here's how you can create a number of tags with your own custom settings all\nat once:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">htmltag</span> <span class=\"kn\">import</span> <span class=\"n\">TagWrap</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">whitelist</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">&quot;b&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;i&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;strong&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;em&quot;</span><span class=\"p\">]</span> <span class=\"c\"># Whitelist ourselves</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">replacement</span> <span class=\"o\">=</span> <span class=\"s\">&quot;(tag not allowed)&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">tag</span> <span class=\"ow\">in</span> <span class=\"n\">whitelist</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>    <span class=\"nb\">setattr</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"p\">[</span><span class=\"n\">__name__</span><span class=\"p\">],</span> <span class=\"n\">tag</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"n\">TagWrap</span><span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"p\">,</span> <span class=\"n\">whitelist</span><span class=\"o\">=</span><span class=\"n\">whitelist</span><span class=\"p\">,</span> <span class=\"n\">replacement</span><span class=\"o\">=</span><span class=\"n\">replacement</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">strong</span><span class=\"o\">.</span><span class=\"n\">replacement</span> \n<span class=\"go\">&#39;(tag not allowed)&#39;    </span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\"><tt class=\"docutils literal\"><span class=\"pre\">sys.modules[__name__]</span></tt> is the current module; the global 'self'.</p>\n</div>\n<dl class=\"method\">\n<dt>\n<tt class=\"descname\">copy</tt><big>(</big><em>tagname</em>, <em>**kwargs</em><big>)</big><a class=\"reference internal\" href=\"_modules/htmltag/#TagWrap.copy\"><span class=\"viewcode-link\">[source]</span></a></dt>\n<dd><p>Returns a new instance of <a class=\"reference internal\" href=\"#htmltag.TagWrap\" title=\"htmltag.TagWrap\"><tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">TagWrap</span></tt></a> using the given <em>tagname</em> that has\nall the same attributes as this instance.  If <em>kwargs</em> is given they\nwill override the attributes of the created instance.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt>\n<tt class=\"descname\">escape</tt><big>(</big><em>string</em><big>)</big><a class=\"reference internal\" href=\"_modules/htmltag/#TagWrap.escape\"><span class=\"viewcode-link\">[source]</span></a></dt>\n<dd><p>Returns <em>string</em> with all instances of '&lt;', '&gt;', and '&amp;' converted into\nHTML entities.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt>\n<tt class=\"descname\">wrap</tt><big>(</big><em>tag</em>, <em>*args</em>, <em>**kwargs</em><big>)</big><a class=\"reference internal\" href=\"_modules/htmltag/#TagWrap.wrap\"><span class=\"viewcode-link\">[source]</span></a></dt>\n<dd><p>Returns all <em>args</em> (strings) wrapped in HTML tags like so:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">TagWrap</span><span class=\"p\">(</span><span class=\"s\">&#39;b&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">(</span><span class=\"s\">&#39;bold text&#39;</span><span class=\"p\">))</span>\n<span class=\"go\">&lt;b&gt;bold text&lt;/b&gt;</span>\n</pre></div>\n</div>\n<p>To add attributes to the tag you can pass them as keyword arguments:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">TagWrap</span><span class=\"p\">(</span><span class=\"s\">&#39;a&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"s\">&#39;awesome software&#39;</span><span class=\"p\">,</span> <span class=\"n\">href</span><span class=\"o\">=</span><span class=\"s\">&#39;http://liftoffsoftware.com/&#39;</span><span class=\"p\">))</span>\n<span class=\"go\">&lt;a href=&quot;http://liftoffsoftware.com/&quot;&gt;awesome software&lt;/a&gt;</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\"><a class=\"reference internal\" href=\"#htmltag.TagWrap.wrap\" title=\"htmltag.TagWrap.wrap\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">wrap()</span></tt></a> will automatically convert '&lt;', '&gt;',         and '&amp;' into HTML entities unless the wrapped string has an <tt class=\"xref py py-obj docutils literal\"><span class=\"pre\">__html__</span></tt>         method</p>\n</div>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"selfwrap\">\n<h2>SelfWrap()<a class=\"headerlink\" href=\"#selfwrap\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"class\">\n<dt id=\"htmltag.SelfWrap\">\n<em class=\"property\">class </em><tt class=\"descclassname\">htmltag.</tt><tt class=\"descname\">SelfWrap</tt><big>(</big><em>tagname</em>, <em>*args</em>, <em>**kwargs</em><big>)</big><a class=\"reference internal\" href=\"_modules/htmltag/#SelfWrap\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#htmltag.SelfWrap\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This class is the magic that lets us do things like:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">htmltag</span> <span class=\"kn\">import</span> <span class=\"n\">span</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n</div>\n<div class=\"section\" id=\"indices-and-tables\">\n<h1>Indices and tables<a class=\"headerlink\" href=\"#indices-and-tables\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"genindex/\"><em>Index</em></a></li>\n<li><a class=\"reference internal\" href=\"py-modindex/\"><em>Module Index</em></a></li>\n<li><a class=\"reference internal\" href=\"search/\"><em>Search Page</em></a></li>\n</ul>\n</div>\n", "display_toc": true, "title": "htmltag.py - Safely and intuitively construct HTML tags", "sourcename": "index.txt", "customsidebar": null, "current_page_name": "index", "next": null, "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"]], "meta": {}, "parents": [], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">htmltag.py - Safely and intuitively construct HTML tags</a><ul>\n<li><a class=\"reference internal\" href=\"#the-htmltag-module\">The htmltag module</a><ul>\n<li><a class=\"reference internal\" href=\"#combining-tags-and-content\">Combining Tags and Content</a></li>\n<li><a class=\"reference internal\" href=\"#special-characters\">Special Characters</a></li>\n<li><a class=\"reference internal\" href=\"#protections-against-cross-site-scripting-xss\">Protections Against Cross-Site Scripting (XSS)</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#functions-and-classes\">Functions and Classes</a></li>\n<li><a class=\"reference internal\" href=\"#strip-xss\">strip_xss()</a></li>\n<li><a class=\"reference internal\" href=\"#html\">HTML()</a></li>\n<li><a class=\"reference internal\" href=\"#tagwrap\">TagWrap()</a></li>\n<li><a class=\"reference internal\" href=\"#selfwrap\">SelfWrap()</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#indices-and-tables\">Indices and tables</a></li>\n</ul>\n", "prev": null, "metatags": ""}