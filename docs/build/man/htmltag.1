.TH "HTMLTAG" "1" "April 27, 2013" "1.5" "htmltag"
.SH NAME
htmltag \- htmltag Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.\" Man page generated from reStructuredText.
.
.sp
\fIModule author: Dan McDougall <\fI\%daniel.mcdougall@liftoffsoftware.com\fP>\fP
.SH THE HTMLTAG MODULE
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The latest, complete documentation of htmltag can be found here:
\fI\%http://liftoff.github.io/htmltag/\fP
.sp
The latest version of this module can be obtained from Github:
\fI\%http://liftoff.github.io/htmltag/\fP
.UNINDENT
.UNINDENT
.sp
htmltag.py \- A Python (2 \fIand\fP 3) module for wrapping whatever strings you want
in HTML tags. Example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>>> from htmltag import strong
>>> print(strong("SO STRONG!"))
<strong>SO STRONG!</strong>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
What tags are supported?  All of them!  An important facet of modern web
programming is the ability to use your own custom tags.  For example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>>> from htmltag import foobar
>>> foobar(\(aqCustom tag example\(aq)
\(aq<foobar>Custom tag example</foobar>\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To add attributes inside your tag just pass them as keyword arguments:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>>> from htmltag import a
>>> print(a(\(aqawesome software\(aq, href=\(aqhttp://liftoffsoftware.com/\(aq))
<a href="http://liftoffsoftware.com/">awesome software</a>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To work around the problem of reserved words as keyword arguments (i.e. can\(aqt
have \(aqclass="foo"\(aq) just prefix the keyword with an underscore like so:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>>> from htmltag import div
>>> print(div("example", _class="someclass"))
<div class="someclass">example</div>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Another option\-\-which is useful for things like \(aqdata\-*\(aq attributes\-\-is to pass
keyword arguments as a dict using the \fI\%** operator\fP
like so:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>>> from htmltag import li
>>> print(li("CEO", **{"class": "user", "data\-name": "Dan McDougall"}))
<li class="user" data\-name="Dan McDougall">CEO</li>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you want to use upper\-case tags just import them in caps:
.sp
.nf
.ft C
>>> from htmltag import STRONG
>>> print(STRONG(\(aqwhatever\(aq))
<STRONG>whatever</STRONG>
.ft P
.fi
.SS Combining Tags and Content
.sp
You can combine multiple tags to create a larger HTML string like so:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>>> from htmltag import table, tr, td
>>> print(table(
\&...     tr(td(\(aq100\(aq), td(\(aq200\(aq), id="row1"),
\&...     tr(td(\(aq150\(aq), td(\(aq250\(aq), id="row2"),
\&... ))
<table><tr id="row1"><td>100</td><td>200</td></tr><tr id="row2"><td>150</td><td>250</td></tr></table>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP If you\(aqre going to do something like the above please use a \fIreal\fP
template language/module instead of \fI\%htmltag\fP.  You\(aqre \fIprobably\fP "doing it
wrong" if you end up with something like the above in your code.  For example,
try \fI\%Tornado's template engine\fP.
.SS Special Characters
.sp
Special characters that cause trouble like, \(aq<\(aq, \(aq>\(aq, and \(aq&\(aq will be
automatically converted into HTML entities.  If you don\(aqt want that to happen
just wrap your string in \fI\%htmltag.HTML\fP like so:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>>> from htmltag import HTML, a
>>> txt = HTML("<strong>I am already HTML. Don\(aqt escape me!</strong>")
>>> a(txt, href="http://liftoffsoftware.com/")
\(aq<a href="http://liftoffsoftware.com/"><strong>I am already HTML. Don\e\(aqt escape me!</strong></a>\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Since Python doesn\(aqt allow modules to have dashes (\-) in their names, if you
need to create a tag like that just use an underscore and change its \(aqtagname\(aq
attribute:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>>> from htmltag import foo_bar
>>> print(foo_bar(\(aqbaz\(aq)) # Before
\(aq<foo_bar>baz</foo_bar>\(aq
>>> foo_bar.tagname = \(aqfoo\-bar\(aq
>>> print(foo_bar(\(aqbaz\(aq)) # Before
\(aq<foo\-bar>baz</foo\-bar>\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
By default self\-closing HTML tags like \(aq<img>\(aq will not include an ending slash.
To change this behavior (i.e. for XHTML) just set \(aqending_slash\(aq to \fI\%True\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>>> from htmltag import img
>>> img.ending_slash = True
>>> img(src="http://somehost/images/image.png")
\(aq<img src="http://somehost/images/image.png" />\(aq
>>> img.ending_slash = False # Reset for later doctests
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Protections Against Cross\-Site Scripting (XSS)
.sp
By default all unsafe (XSS) content in HTML tags will be removed:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>>> from htmltag import a, img
>>> a(img(src="javascript:alert(\(aqpwned!\(aq)"), href="http://hacker/")
\(aq<a href="http://hacker/">(removed)</a>\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you want to change this behavior set the tag\(aqs \(aqsafe_mode\(aq attribute like
so:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>>> from htmltag import a, img
>>> a.safe_mode = False
>>> img.safe_mode = False
>>> a(img(src="javascript:alert(\(aqpwned!\(aq)"), href="http://hacker/")
\(aq<a href="http://hacker/"><img src="javascript:alert(\e\(aqpwned!\e\(aq)"></a>\(aq
>>> a.safe_mode = True # Reset for later doctests
>>> img.safe_mode = True # Ditto
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You may also change the replacement text if you like:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>>> from htmltag import a, img
>>> img.replacement = "No no no!"
>>> a(img(src="javascript:alert(\(aqpwned!\(aq)"), href="http://hacker/")
\(aq<a href="http://hacker/">No no no!</a>\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you set \(aqreplacement\(aq to \(aqentities\(aq the rejected HTML will be converted to
character entities like so:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>>> from htmltag import a, img
>>> a.replacement = "entities"
>>> img.replacement = "entities"
>>> a(img(src="javascript:alert(\(aqpwned!\(aq)"), href="http://hacker/")
\(aq<a href="http://hacker/">&lt;img src="javascript:alert(\e\(aqpwned!\e\(aq)"&gt;</a>\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
It is also possible to create a whitelist of allowed tags.  All other tags
contained therein will automatically be replaced:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>>> from htmltag import span
>>> whitelist = [\(aqspan\(aq, \(aqb\(aq, \(aqi\(aq, \(aqstrong\(aq]
>>> span.whitelist = whitelist
>>> span(HTML(\(aqThis is <b>bold</b> new lib is <script>awesome();</script>\(aq))
\(aq<span>This is <b>bold</b> new lib is (removed)awesome();(removed)</span>\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Lastly, all strings returned by \fI\%htmltag\fP are actually a subclass of \fI\%str\fP:
\fI\%HTML\fP.  It has a useful \fBescaped\fP property:
.sp
.nf
.ft C
>>> from htmltag import address
>>> address.safe_mode = False # Turn off so we have a dangerous example ;)
>>> html = address(\(aq1 Hacker Ln., Nowhere, USA\(aq)
>>> print(html)
<address>1 Hacker Ln., Nowhere, USA</address>
>>> print(html.escaped)
&lt;address&gt;1 Hacker Ln., Nowhere, USA&lt;/address&gt;
.ft P
.fi
.sp
This can be extremely useful if you want to be double\-sure that no executable
stuff ends up in your program\(aqs output.
.SH FUNCTIONS AND CLASSES
.INDENT 0.0
.TP
.B class htmltag.TagWrap(tagname, **kwargs)
Lets you wrap whatever string you want in whatever HTML tag (\fItagname\fP) you
want.
.sp
\fBOptional Keyword Arguments:\fP
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsafe_mode\fP (\fIboolean\fP) \-\- If \fI\%True\fP dangerous (XSS) content will be removed
from all HTML.  Defaults to \fI\%True\fP
.IP \(bu 2
\fBwhitelist\fP (\fIiterable\fP) \-\- If given only tags that exist in the whitelist will be
allowed.  All else will be escaped into HTML entities.
.IP \(bu 2
\fBreplacement\fP (\fIstring, "entities", or "off"\fP) \-\- A string to replace unsafe HTML with.  If set to
"entities", will convert unsafe tags to HTML entities so they
display as\-is but won\(aqt be evaluated by renderers/browsers\(aq.  The
defaults is "(removed)".
.IP \(bu 2
\fBlog_rejects\fP (\fIboolean\fP) \-\- If \fI\%True\fP rejected unsafe (XSS) HTML will be
logged using \fBlogging.error()\fP.  Defaults to \fI\%False\fP
.IP \(bu 2
\fBending_slash\fP (\fIboolean\fP) \-\- If \fI\%True\fP self\-closing HTML tags like \(aq<img>\(aq
will not have a \(aq/\(aq placed before the \(aq>\(aq.  Usually only necessary
with XML and XHTML documents (as opposed to regular HTML).  Defaults
to \fI\%False\fP.
.UNINDENT
.UNINDENT
.sp
The \fI\%TagWrap\fP class may be used in a direct fashion (as opposed to the
metaprogramming magic way: \fBfrom htmltag import sometag\fP):
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> from htmltag import TagWrap
>>> img = TagWrap(\(aqimg\(aq, ending_slash=True)
>>> print(img(src="http://company.com/someimage.png"))
<img src="http://company.com/someimage.png" />
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fI\%TagWrap\fP class also has a \fI\%copy()\fP method which can be
useful when you want a new tag to have the same attributes as another:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> from htmltag import TagWrap
>>> whitelist = ["b", "i", "strong", "a", "em"]
>>> replacement = "(tag not allowed)"
>>> b = TagWrap(\(aqb\(aq, whitelist=whitelist, replacement=replacement)
>>> i = b.copy(\(aqi\(aq)
>>> print(i.whitelist)
[\(aqb\(aq, \(aqi\(aq, \(aqstrong\(aq, \(aqa\(aq, \(aqem\(aq]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Here\(aqs how you can create a number of tags with your own custom settings all
at once:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import sys
>>> from htmltag import TagWrap
>>> whitelist = ["b", "i", "strong", "a", "em"] # Whitelist ourselves
>>> replacement = "(tag not allowed)"
>>> for tag in whitelist:
\&...     setattr(sys.modules[__name__], tag,
\&...         TagWrap(tag, whitelist=whitelist, replacement=replacement))
>>> strong.replacement # doctest: +SKIP
\(aq(tag not allowed)\(aq    # doctest: +SKIP
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
\fBsys.modules[__name__]\fP is the current module; the global \(aqself\(aq.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __weakref__
list of weak references to the object (if defined)
.UNINDENT
.INDENT 7.0
.TP
.B copy(tagname, **kwargs)
Returns a new instance of \fI\%TagWrap\fP using the given \fItagname\fP that has
all the same attributes as this instance.  If \fIkwargs\fP is given they
will override the attributes of the created instance.
.UNINDENT
.INDENT 7.0
.TP
.B escape(string)
Returns \fIstring\fP with all instances of \(aq<\(aq, \(aq>\(aq, and \(aq&\(aq converted into
HTML entities.
.UNINDENT
.INDENT 7.0
.TP
.B wrap(tag, *args, **kwargs)
Returns all \fIargs\fP (strings) wrapped in HTML tags like so:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> b = TagWrap(\(aqb\(aq)
>>> print(b(\(aqbold text\(aq))
<b>bold text</b>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To add attributes to the tag you can pass them as keyword arguments:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> a = TagWrap(\(aqa\(aq)
>>> print(a(\(aqawesome software\(aq, href=\(aqhttp://liftoffsoftware.com/\(aq))
<a href="http://liftoffsoftware.com/">awesome software</a>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
\fI\%wrap()\fP will automatically convert \(aq<\(aq, \(aq>\(aq,         and \(aq&\(aq into HTML entities unless the wrapped string has an \fB__html__\fP         method
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SH STRIP_XSS()
.INDENT 0.0
.TP
.B htmltag.strip_xss(html, whitelist=None, replacement=\(aq(removed)\(aq)
This function returns a tuple containing:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fIhtml\fP with all non\-whitelisted HTML tags replaced with \fIreplacement\fP.
.IP \(bu 2
A \fBset()\fP containing the tags that were removed.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Any tags that contain JavaScript, VBScript, or other known XSS/executable
functions will also be removed.
.sp
If \fIwhitelist\fP is not given the following will be used:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
whitelist = set([
    \(aqa\(aq, \(aqabbr\(aq, \(aqaside\(aq, \(aqaudio\(aq, \(aqbdi\(aq, \(aqbdo\(aq, \(aqblockquote\(aq, \(aqcanvas\(aq,
    \(aqcaption\(aq, \(aqcode\(aq, \(aqcol\(aq, \(aqcolgroup\(aq, \(aqdata\(aq, \(aqdd\(aq, \(aqdel\(aq,
    \(aqdetails\(aq, \(aqdiv\(aq, \(aqdl\(aq, \(aqdt\(aq, \(aqem\(aq, \(aqfigcaption\(aq, \(aqfigure\(aq, \(aqh1\(aq,
    \(aqh2\(aq, \(aqh3\(aq, \(aqh4\(aq, \(aqh5\(aq, \(aqh6\(aq, \(aqhr\(aq, \(aqi\(aq, \(aqimg\(aq, \(aqins\(aq, \(aqkbd\(aq, \(aqli\(aq,
    \(aqmark\(aq, \(aqol\(aq, \(aqp\(aq, \(aqpre\(aq, \(aqq\(aq, \(aqrp\(aq, \(aqrt\(aq, \(aqruby\(aq, \(aqs\(aq, \(aqsamp\(aq,
    \(aqsmall\(aq, \(aqsource\(aq, \(aqspan\(aq, \(aqstrong\(aq, \(aqsub\(aq, \(aqsummary\(aq, \(aqsup\(aq,
    \(aqtable\(aq, \(aqtd\(aq, \(aqth\(aq, \(aqtime\(aq, \(aqtr\(aq, \(aqtrack\(aq, \(aqu\(aq, \(aqul\(aq, \(aqvar\(aq,
    \(aqvideo\(aq, \(aqwbr\(aq
])
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
To disable the whitelisting simply set \fBwhitelist="off"\fP.
.UNINDENT
.UNINDENT
.sp
Example:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> html = \(aq<span>Hello, exploit: <img src="javascript:alert("pwned!")"></span>\(aq
>>> html, rejects = strip_xss(html)
>>> print("\(aq%s\(aq, Rejected: \(aq%s\(aq" % (html, " ".join(rejects)))
\(aq<span>Hello, exploit: (removed)</span>\(aq, Rejected: \(aq<img src="javascript:alert("pwned!")">\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
The default \fIreplacement\fP is "(removed)".
.UNINDENT
.UNINDENT
.sp
If \fIreplacement\fP is "entities" bad HTML tags will be encoded into HTML
entities.  This allows things like <script>\(aqwhatever\(aq</script> to be
displayed without execution (which would be much less annoying to users that
were merely trying to share a code example).  Here\(aqs an example:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> html = \(aq<span>Hello, exploit: <img src="javascript:alert("pwned!")"></span>\(aq
>>> html, rejects = strip_xss(html, replacement="entities")
>>> print(html)
<span>Hello, exploit: &lt;img src="javascript:alert("pwned!")"&gt;</span>
>>> print("Rejected: \(aq%s\(aq" % ", ".join(rejects))
Rejected: \(aq<img src="javascript:alert("pwned!")">\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP This function should work to protect against \fIall\fP \fI\%the XSS
examples at OWASP\fP.  Please
\fI\%let us know\fP if you
find something we missed.
.UNINDENT
.SH HTML()
.INDENT 0.0
.TP
.B class htmltag.HTML
New in version 1.2.0.

.sp
A subclass of Python\(aqs built\-in \fI\%str\fP to add a simple \fI\%__html__\fP method
that lets us know this string is HTML and does not need to be escaped.  It
also has an \fI\%escaped\fP property that will return \fBself\fP with all special
characters converted into HTML entities.
.INDENT 7.0
.TP
.B __html__()
Returns \fBself\fP (we\(aqre already a string) in unmodified form.
.UNINDENT
.INDENT 7.0
.TP
.B append(*strings)
Adds any number of supplied \fIstrings\fP to \fBself\fP (we\(aqre a subclass of
\fI\%str\fP remember) just before the last closing tag and returns a new
instance of \fI\%HTML\fP with the result.
Example:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> from htmltag import span, b
>>> html = span(\(aqTest:\(aq)
>>> print(html)
<span>Test:</span>
>>> html = html.append(\(aq \(aq, b(\(aqappended\(aq))
>>> print(html)
<span>Test: <b>appended</b></span>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In the case of self\-closing tags like \(aq<img>\(aq the string will simply be
appended after the tag:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> from htmltag import img
>>> image = img(src="http://company.com/image.png")
>>> print(image.append("Appended string"))
<img src="http://company.com/image.png">Appended string
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Why not update ourselves in\-place?  Because we\(aqre a subclass
of \fI\%str\fP; in Python strings are immutable.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B escaped
A property that returns \fBself\fP with all characters that have special
meaning (in HTML/XML) replaced with HTML entities.  Example:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> print(HTML(\(aq<span>These span tags will be escaped</span>\(aq).escaped)
&lt;span&gt;These span tags will be escaped&lt;/span&gt;
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SH TAGWRAP()
.INDENT 0.0
.TP
.B class htmltag.TagWrap(tagname, **kwargs)
Lets you wrap whatever string you want in whatever HTML tag (\fItagname\fP) you
want.
.sp
\fBOptional Keyword Arguments:\fP
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsafe_mode\fP (\fIboolean\fP) \-\- If \fI\%True\fP dangerous (XSS) content will be removed
from all HTML.  Defaults to \fI\%True\fP
.IP \(bu 2
\fBwhitelist\fP (\fIiterable\fP) \-\- If given only tags that exist in the whitelist will be
allowed.  All else will be escaped into HTML entities.
.IP \(bu 2
\fBreplacement\fP (\fIstring, "entities", or "off"\fP) \-\- A string to replace unsafe HTML with.  If set to
"entities", will convert unsafe tags to HTML entities so they
display as\-is but won\(aqt be evaluated by renderers/browsers\(aq.  The
defaults is "(removed)".
.IP \(bu 2
\fBlog_rejects\fP (\fIboolean\fP) \-\- If \fI\%True\fP rejected unsafe (XSS) HTML will be
logged using \fBlogging.error()\fP.  Defaults to \fI\%False\fP
.IP \(bu 2
\fBending_slash\fP (\fIboolean\fP) \-\- If \fI\%True\fP self\-closing HTML tags like \(aq<img>\(aq
will not have a \(aq/\(aq placed before the \(aq>\(aq.  Usually only necessary
with XML and XHTML documents (as opposed to regular HTML).  Defaults
to \fI\%False\fP.
.UNINDENT
.UNINDENT
.sp
The \fI\%TagWrap\fP class may be used in a direct fashion (as opposed to the
metaprogramming magic way: \fBfrom htmltag import sometag\fP):
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> from htmltag import TagWrap
>>> img = TagWrap(\(aqimg\(aq, ending_slash=True)
>>> print(img(src="http://company.com/someimage.png"))
<img src="http://company.com/someimage.png" />
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fI\%TagWrap\fP class also has a \fI\%copy()\fP method which can be
useful when you want a new tag to have the same attributes as another:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> from htmltag import TagWrap
>>> whitelist = ["b", "i", "strong", "a", "em"]
>>> replacement = "(tag not allowed)"
>>> b = TagWrap(\(aqb\(aq, whitelist=whitelist, replacement=replacement)
>>> i = b.copy(\(aqi\(aq)
>>> print(i.whitelist)
[\(aqb\(aq, \(aqi\(aq, \(aqstrong\(aq, \(aqa\(aq, \(aqem\(aq]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Here\(aqs how you can create a number of tags with your own custom settings all
at once:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import sys
>>> from htmltag import TagWrap
>>> whitelist = ["b", "i", "strong", "a", "em"] # Whitelist ourselves
>>> replacement = "(tag not allowed)"
>>> for tag in whitelist:
\&...     setattr(sys.modules[__name__], tag,
\&...         TagWrap(tag, whitelist=whitelist, replacement=replacement))
>>> strong.replacement # doctest: +SKIP
\(aq(tag not allowed)\(aq    # doctest: +SKIP
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
\fBsys.modules[__name__]\fP is the current module; the global \(aqself\(aq.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B copy(tagname, **kwargs)
Returns a new instance of \fI\%TagWrap\fP using the given \fItagname\fP that has
all the same attributes as this instance.  If \fIkwargs\fP is given they
will override the attributes of the created instance.
.UNINDENT
.INDENT 7.0
.TP
.B escape(string)
Returns \fIstring\fP with all instances of \(aq<\(aq, \(aq>\(aq, and \(aq&\(aq converted into
HTML entities.
.UNINDENT
.INDENT 7.0
.TP
.B wrap(tag, *args, **kwargs)
Returns all \fIargs\fP (strings) wrapped in HTML tags like so:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> b = TagWrap(\(aqb\(aq)
>>> print(b(\(aqbold text\(aq))
<b>bold text</b>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To add attributes to the tag you can pass them as keyword arguments:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> a = TagWrap(\(aqa\(aq)
>>> print(a(\(aqawesome software\(aq, href=\(aqhttp://liftoffsoftware.com/\(aq))
<a href="http://liftoffsoftware.com/">awesome software</a>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
\fI\%wrap()\fP will automatically convert \(aq<\(aq, \(aq>\(aq,         and \(aq&\(aq into HTML entities unless the wrapped string has an \fB__html__\fP         method
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SH SELFWRAP()
.INDENT 0.0
.TP
.B class htmltag.SelfWrap(tagname, *args, **kwargs)
This class is the magic that lets us do things like:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> from htmltag import span
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
\fIgenindex\fP
.IP \(bu 2
\fImodindex\fP
.IP \(bu 2
\fIsearch\fP
.UNINDENT
.SH AUTHOR
Liftoff Software
.SH COPYRIGHT
2013, Liftoff Software Corporation
.\" Generated by docutils manpage writer.
.
